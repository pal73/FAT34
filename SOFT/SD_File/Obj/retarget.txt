; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\retarget.o --depend=.\Obj\retarget.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -DSTDIO --omf_browse=.\Obj\retarget.crf Retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sendchar PROC
;;;42      *----------------------------------------------------------------------------*/
;;;43     int sendchar (int c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;44     
;;;45       if (c == '\n')  {
000004  280a              CMP      r0,#0xa
000006  d103              BNE      |L1.16|
;;;46         SER_putChar (1, 0x0D);
000008  210d              MOVS     r1,#0xd
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       SER_putChar
                  |L1.16|
;;;47       }
;;;48       SER_putChar (1, c);
000010  4621              MOV      r1,r4
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SER_putChar
;;;49     
;;;50       return (c);
000018  4620              MOV      r0,r4
;;;51     }
00001a  bd10              POP      {r4,pc}
;;;52     
                          ENDP

                  getkey PROC
;;;56      *----------------------------------------------------------------------------*/
;;;57     int getkey (void) {
00001c  2001              MOVS     r0,#1
;;;58     
;;;59       return (SER_getChar(1));
00001e  f7ffbffe          B.W      SER_getChar
;;;60     }
;;;61     #endif
                          ENDP

                  _ttywrch PROC
;;;64     
;;;65     void _ttywrch (int ch) {
000022  e7fe              B        sendchar
;;;66     #ifdef STDIO
;;;67       sendchar(ch);
;;;68     #endif
;;;69     }
;;;70     
                          ENDP

                  _sys_open PROC
;;;72     
;;;73     FILEHANDLE _sys_open (const char *name, int openmode) {
000024  b570              PUSH     {r4-r6,lr}
000026  460d              MOV      r5,r1
000028  4604              MOV      r4,r0
;;;74       /* Register standard Input Output devices. */
;;;75       if (strcmp(name, "STDIN") == 0) {
00002a  a142              ADR      r1,|L1.308|
00002c  f7fffffe          BL       strcmp
000030  b178              CBZ      r0,|L1.82|
;;;76         return (STDIN);
;;;77       }
;;;78       if (strcmp(name, "STDOUT") == 0) {
000032  a142              ADR      r1,|L1.316|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       strcmp
00003a  b168              CBZ      r0,|L1.88|
;;;79         return (STDOUT);
;;;80       }
;;;81       if (strcmp(name, "STDERR") == 0) {
00003c  a141              ADR      r1,|L1.324|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       strcmp
000044  b158              CBZ      r0,|L1.94|
;;;82         return (STDERR);
;;;83       }
;;;84       return (__fopen (name, openmode));
000046  4629              MOV      r1,r5
000048  4620              MOV      r0,r4
00004a  e8bd4070          POP      {r4-r6,lr}
00004e  f7ffbffe          B.W      __fopen
                  |L1.82|
000052  f2480001          MOV      r0,#0x8001            ;76
;;;85     }
000056  bd70              POP      {r4-r6,pc}
                  |L1.88|
000058  f2480002          MOV      r0,#0x8002            ;79
00005c  bd70              POP      {r4-r6,pc}
                  |L1.94|
00005e  f2480003          MOV      r0,#0x8003            ;82
000062  bd70              POP      {r4-r6,pc}
;;;86     
                          ENDP

                  _sys_close PROC
;;;88     
;;;89     int _sys_close (FILEHANDLE fh) {
000064  f5b04f00          CMP      r0,#0x8000
;;;90       if (fh > 0x8000) {
000068  dd01              BLE      |L1.110|
;;;91         return (0);
00006a  2000              MOVS     r0,#0
;;;92       }
;;;93       return (__fclose (fh));
;;;94     }
00006c  4770              BX       lr
                  |L1.110|
00006e  f7ffbffe          B.W      __fclose
;;;95     
                          ENDP

                  _sys_write PROC
;;;97     
;;;98     int _sys_write (FILEHANDLE fh, const U8 *buf, U32 len, int mode) {
000072  b570              PUSH     {r4-r6,lr}
000074  460d              MOV      r5,r1
;;;99     #ifdef STDIO
;;;100      if (fh == STDOUT) {
000076  f5a04100          SUB      r1,r0,#0x8000
00007a  4614              MOV      r4,r2                 ;98
00007c  3902              SUBS     r1,#2
00007e  d108              BNE      |L1.146|
                  |L1.128|
;;;101        /* Standard Output device. */
;;;102        for (  ; len; len--) {
000080  b12c              CBZ      r4,|L1.142|
;;;103          sendchar (*buf++);
000082  f8150b01          LDRB     r0,[r5],#1
000086  f7fffffe          BL       sendchar
00008a  1e64              SUBS     r4,r4,#1              ;102
00008c  e7f8              B        |L1.128|
                  |L1.142|
;;;104        }
;;;105        return (0);
00008e  2000              MOVS     r0,#0
;;;106      }
;;;107    #endif
;;;108      if (fh > 0x8000) {
;;;109        return (-1);
;;;110      }
;;;111      return (__write (fh, buf, len));
;;;112    }
000090  bd70              POP      {r4-r6,pc}
                  |L1.146|
000092  f5b04f00          CMP      r0,#0x8000            ;108
000096  dd02              BLE      |L1.158|
000098  f04f30ff          MOV      r0,#0xffffffff        ;109
00009c  bd70              POP      {r4-r6,pc}
                  |L1.158|
00009e  4629              MOV      r1,r5                 ;111
0000a0  e8bd4070          POP      {r4-r6,lr}            ;111
0000a4  f7ffbffe          B.W      __write
;;;113    
                          ENDP

                  _sys_read PROC
;;;115    
;;;116    int _sys_read (FILEHANDLE fh, U8 *buf, U32 len, int mode) {
0000a8  b570              PUSH     {r4-r6,lr}
0000aa  460d              MOV      r5,r1
;;;117    #ifdef STDIO
;;;118      if (fh == STDIN) {
0000ac  f2480101          MOV      r1,#0x8001
0000b0  4614              MOV      r4,r2                 ;116
0000b2  4288              CMP      r0,r1
0000b4  d108              BNE      |L1.200|
                  |L1.182|
;;;119        /* Standard Input device. */
;;;120        for (  ; len; len--) {
0000b6  b12c              CBZ      r4,|L1.196|
;;;121          *buf++ = getkey ();
0000b8  f7fffffe          BL       getkey
0000bc  f8050b01          STRB     r0,[r5],#1
0000c0  1e64              SUBS     r4,r4,#1              ;120
0000c2  e7f8              B        |L1.182|
                  |L1.196|
;;;122        }
;;;123        return (0);
0000c4  2000              MOVS     r0,#0
;;;124      }
;;;125    #endif
;;;126      if (fh > 0x8000) {
;;;127        return (-1);
;;;128      }
;;;129      return (__read (fh, buf, len));
;;;130    }
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  f5b04f00          CMP      r0,#0x8000            ;126
0000cc  dd02              BLE      |L1.212|
0000ce  f04f30ff          MOV      r0,#0xffffffff        ;127
0000d2  bd70              POP      {r4-r6,pc}
                  |L1.212|
0000d4  4629              MOV      r1,r5                 ;129
0000d6  e8bd4070          POP      {r4-r6,lr}            ;129
0000da  f7ffbffe          B.W      __read
;;;131    
                          ENDP

                  _sys_istty PROC
;;;133    
;;;134    int _sys_istty (FILEHANDLE fh) {
0000de  f5b04f00          CMP      r0,#0x8000
;;;135      if (fh > 0x8000) {
0000e2  dd01              BLE      |L1.232|
;;;136        return (1);
0000e4  2001              MOVS     r0,#1
;;;137      }
;;;138      return (0);
;;;139    }
0000e6  4770              BX       lr
                  |L1.232|
0000e8  2000              MOVS     r0,#0                 ;138
0000ea  4770              BX       lr
;;;140    
                          ENDP

                  _sys_seek PROC
;;;142    
;;;143    int _sys_seek (FILEHANDLE fh, long pos) {
0000ec  f5b04f00          CMP      r0,#0x8000
;;;144      if (fh > 0x8000) {
0000f0  dd02              BLE      |L1.248|
;;;145        return (-1);
0000f2  f04f30ff          MOV      r0,#0xffffffff
;;;146      }
;;;147      return (__setfpos (fh, pos));
;;;148    }
0000f6  4770              BX       lr
                  |L1.248|
0000f8  f7ffbffe          B.W      __setfpos
;;;149    
                          ENDP

                  _sys_ensure PROC
;;;151    
;;;152    int _sys_ensure (FILEHANDLE fh) {
0000fc  f5b04f00          CMP      r0,#0x8000
;;;153      if (fh > 0x8000) {
000100  dd02              BLE      |L1.264|
;;;154        return (-1);
000102  f04f30ff          MOV      r0,#0xffffffff
;;;155      }
;;;156      return (__flushbuf (fh));
;;;157    }
000106  4770              BX       lr
                  |L1.264|
000108  f7ffbffe          B.W      __flushbuf
;;;158    
                          ENDP

                  _sys_flen PROC
;;;160    
;;;161    long _sys_flen (FILEHANDLE fh) {
00010c  f5b04f00          CMP      r0,#0x8000
;;;162      if (fh > 0x8000) {
000110  dd01              BLE      |L1.278|
;;;163        return (0);
000112  2000              MOVS     r0,#0
;;;164      }
;;;165      return (__get_flen (fh));
;;;166    }
000114  4770              BX       lr
                  |L1.278|
000116  eb000180          ADD      r1,r0,r0,LSL #2       ;165
00011a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;165
00011e  490b              LDR      r1,|L1.332|
000120  eb010080          ADD      r0,r1,r0,LSL #2       ;165
000124  2100              MOVS     r1,#0                 ;165
000126  f7ffbffe          B.W      __getfsize
;;;167    
                          ENDP

                  _sys_tmpnam PROC
;;;169    
;;;170    int _sys_tmpnam (char *name, int sig, unsigned maxlen) {
00012a  2001              MOVS     r0,#1
;;;171      return (1);
;;;172    }
00012c  4770              BX       lr
;;;173    
                          ENDP

                  _sys_command_string PROC
;;;175    
;;;176    char *_sys_command_string (char *cmd, int len) {
00012e  4770              BX       lr
;;;177      return (cmd);
;;;178    }
;;;179    
                          ENDP

                  _sys_exit PROC
                  |L1.304|
;;;181    
;;;182    void _sys_exit (int return_code) {
000130  e7fe              B        |L1.304|
;;;183      /* Endless loop. */
;;;184      while (1);
;;;185    }
;;;186    
                          ENDP

000132  0000              DCW      0x0000
                  |L1.308|
000134  53544449          DCB      "STDIN",0
000138  4e00    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L1.316|
00013c  5354444f          DCB      "STDOUT",0
000140  555400  
000143  00                DCB      0
                  |L1.324|
000144  53544445          DCB      "STDERR",0
000148  525200  
00014b  00                DCB      0
                  |L1.332|
                          DCD      _iob

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __stdin_name
000000  53544449          DCB      0x53,0x54,0x44,0x49
000004  4e00              DCB      0x4e,0x00

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.constdata||
                  __stdout_name
000000  5354444f          DCB      0x53,0x54,0x44,0x4f
000004  555400            DCB      0x55,0x54,0x00

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  __stderr_name
000000  53544445          DCB      0x53,0x54,0x44,0x45
000004  525200            DCB      0x52,0x52,0x00
