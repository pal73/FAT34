; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\sd_file.o --depend=.\Obj\sd_file.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\sd_file.crf SD_File.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_p
                          REQUIRE _printf_s
                          REQUIRE _printf_n
                          REQUIRE _printf_charcount
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _scanf_int
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                  get_entry PROC
;;;92      *---------------------------------------------------------------------------*/
;;;93     static char *get_entry (char *cp, char **pNext) {
000000  b570              PUSH     {r4-r6,lr}
;;;94       char *sp, lfn = 0, sep_ch = ' ';
000002  2400              MOVS     r4,#0
000004  2320              MOVS     r3,#0x20
000006  4625              MOV      r5,r4
;;;95     
;;;96       if (cp == NULL) {                           /* skip NULL pointers          */
000008  b938              CBNZ     r0,|L1.26|
;;;97         *pNext = cp;
;;;98         return (cp);
00000a  6008              STR      r0,[r1,#0]
;;;99       }
;;;100    
;;;101      for ( ; *cp == ' ' || *cp == '\"'; cp++) {  /* skip blanks and starting  " */
;;;102        if (*cp == '\"') { sep_ch = '\"'; lfn = 1; }
;;;103        *cp = 0;
;;;104      }
;;;105     
;;;106      for (sp = cp; *sp != CR && *sp != LF; sp++) {
;;;107        if ( lfn && *sp == '\"') break;
;;;108        if (!lfn && *sp == ' ' ) break;
;;;109      }
;;;110    
;;;111      for ( ; *sp == sep_ch || *sp == CR || *sp == LF; sp++) {
;;;112        *sp = 0;
;;;113        if ( lfn && *sp == sep_ch) { sp ++; break; }
;;;114      }
;;;115    
;;;116      *pNext = (*sp) ? sp : NULL;                 /* next entry                  */
;;;117      return (cp);
;;;118    }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  2a22              CMP      r2,#0x22              ;102
000010  d101              BNE      |L1.22|
000012  2322              MOVS     r3,#0x22              ;102
000014  2401              MOVS     r4,#1                 ;102
                  |L1.22|
000016  f8005b01          STRB     r5,[r0],#1            ;103
                  |L1.26|
00001a  7802              LDRB     r2,[r0,#0]            ;101
00001c  2a20              CMP      r2,#0x20              ;101
00001e  d0f6              BEQ      |L1.14|
000020  2a22              CMP      r2,#0x22              ;101
000022  d0f4              BEQ      |L1.14|
000024  4602              MOV      r2,r0                 ;106
000026  e006              B        |L1.54|
                  |L1.40|
000028  b114              CBZ      r4,|L1.48|
00002a  2e22              CMP      r6,#0x22              ;107
00002c  d00d              BEQ      |L1.74|
00002e  e001              B        |L1.52|
                  |L1.48|
000030  2e20              CMP      r6,#0x20              ;108
000032  d00a              BEQ      |L1.74|
                  |L1.52|
000034  1c52              ADDS     r2,r2,#1              ;106
                  |L1.54|
000036  7816              LDRB     r6,[r2,#0]            ;106
000038  2e0d              CMP      r6,#0xd               ;106
00003a  d006              BEQ      |L1.74|
00003c  2e0a              CMP      r6,#0xa               ;106
00003e  d1f3              BNE      |L1.40|
000040  e003              B        |L1.74|
                  |L1.66|
000042  7015              STRB     r5,[r2,#0]            ;112
000044  b104              CBZ      r4,|L1.72|
000046  b153              CBZ      r3,|L1.94|
                  |L1.72|
000048  1c52              ADDS     r2,r2,#1              ;111
                  |L1.74|
00004a  7816              LDRB     r6,[r2,#0]            ;111
00004c  429e              CMP      r6,r3                 ;111
00004e  d0f8              BEQ      |L1.66|
000050  2e0d              CMP      r6,#0xd               ;111
000052  d0f6              BEQ      |L1.66|
000054  2e0a              CMP      r6,#0xa               ;111
000056  d0f4              BEQ      |L1.66|
                  |L1.88|
000058  7813              LDRB     r3,[r2,#0]            ;116
00005a  b91b              CBNZ     r3,|L1.100|
00005c  e001              B        |L1.98|
                  |L1.94|
00005e  1c52              ADDS     r2,r2,#1              ;113
000060  e7fa              B        |L1.88|
                  |L1.98|
000062  2200              MOVS     r2,#0                 ;116
                  |L1.100|
000064  600a              STR      r2,[r1,#0]            ;116
000066  bd70              POP      {r4-r6,pc}
;;;119    
                          ENDP

                  dot_format PROC
;;;122     *---------------------------------------------------------------------------*/
;;;123    static void dot_format (U64 val, char *sp) {
000068  e92d41f0          PUSH     {r4-r8,lr}
00006c  4615              MOV      r5,r2
;;;124    
;;;125      if (val >= (U64)1e9) {
00006e  4afa              LDR      r2,|L1.1112|
;;;126        sp += sprintf (sp,"%d.",(U32)(val/(U64)1e9));
;;;127        val %= (U64)1e9;
;;;128        sp += sprintf (sp,"%03d.",(U32)(val/(U64)1e6));
000070  4ef8              LDR      r6,|L1.1108|
000072  1a82              SUBS     r2,r0,r2              ;125
;;;129        val %= (U64)1e6;
;;;130        sprintf (sp,"%03d.%03d",(U32)(val/1000),(U32)(val%1000));
000074  f44f747a          MOV      r4,#0x3e8
000078  f1710200          SBCS     r2,r1,#0              ;125
00007c  d316              BCC      |L1.172|
00007e  4af6              LDR      r2,|L1.1112|
000080  2300              MOVS     r3,#0                 ;126
000082  f7fffffe          BL       __aeabi_uldivmod
000086  4617              MOV      r7,r2                 ;126
000088  4602              MOV      r2,r0                 ;126
00008a  4698              MOV      r8,r3                 ;126
00008c  a1f3              ADR      r1,|L1.1116|
00008e  4628              MOV      r0,r5                 ;126
000090  f7fffffe          BL       __2sprintf
000094  4405              ADD      r5,r5,r0              ;126
000096  4638              MOV      r0,r7                 ;127
000098  4641              MOV      r1,r8                 ;127
00009a  4632              MOV      r2,r6                 ;128
00009c  2300              MOVS     r3,#0                 ;128
00009e  f7fffffe          BL       __aeabi_uldivmod
0000a2  4616              MOV      r6,r2                 ;128
0000a4  461f              MOV      r7,r3                 ;128
0000a6  4602              MOV      r2,r0                 ;128
0000a8  a1ed              ADR      r1,|L1.1120|
;;;131        return;
0000aa  e00c              B        |L1.198|
                  |L1.172|
;;;132      }
;;;133      if (val >= (U64)1e6) {
0000ac  4ae9              LDR      r2,|L1.1108|
0000ae  1a82              SUBS     r2,r0,r2
0000b0  f1710200          SBCS     r2,r1,#0
0000b4  d315              BCC      |L1.226|
;;;134        sp += sprintf (sp,"%d.",(U32)(val/(U64)1e6));
0000b6  4632              MOV      r2,r6
0000b8  2300              MOVS     r3,#0
0000ba  f7fffffe          BL       __aeabi_uldivmod
0000be  4616              MOV      r6,r2
0000c0  461f              MOV      r7,r3
0000c2  4602              MOV      r2,r0
0000c4  a1e5              ADR      r1,|L1.1116|
                  |L1.198|
0000c6  4628              MOV      r0,r5                 ;128
0000c8  f7fffffe          BL       __2sprintf
0000cc  4405              ADD      r5,r5,r0              ;128
0000ce  4630              MOV      r0,r6                 ;129
0000d0  4639              MOV      r1,r7                 ;129
0000d2  4622              MOV      r2,r4                 ;130
0000d4  2300              MOVS     r3,#0                 ;130
0000d6  f7fffffe          BL       __aeabi_uldivmod
0000da  4613              MOV      r3,r2                 ;130
0000dc  4602              MOV      r2,r0                 ;130
0000de  a1e2              ADR      r1,|L1.1128|
0000e0  e00c              B        |L1.252|
                  |L1.226|
;;;135        val %= (U64)1e6;
;;;136        sprintf (sp,"%03d.%03d",(U32)(val/1000),(U32)(val%1000));
;;;137        return;
;;;138      }
;;;139      if (val >= 1000) {
0000e2  f44f727a          MOV      r2,#0x3e8
0000e6  1a82              SUBS     r2,r0,r2
0000e8  f1710200          SBCS     r2,r1,#0
0000ec  d30b              BCC      |L1.262|
;;;140        sprintf (sp,"%d.%03d",(U32)(val/1000),(U32)(val%1000));
0000ee  4622              MOV      r2,r4
0000f0  2300              MOVS     r3,#0
0000f2  f7fffffe          BL       __aeabi_uldivmod
0000f6  4613              MOV      r3,r2
0000f8  4602              MOV      r2,r0
0000fa  a1de              ADR      r1,|L1.1140|
                  |L1.252|
0000fc  4628              MOV      r0,r5
0000fe  e8bd41f0          POP      {r4-r8,lr}
000102  f7ffbffe          B.W      __2sprintf
                  |L1.262|
;;;141        return;
;;;142      }
;;;143      sprintf (sp,"%d",(U32)(val));
000106  4602              MOV      r2,r0
000108  4628              MOV      r0,r5
00010a  e8bd41f0          POP      {r4-r8,lr}
00010e  a1db              ADR      r1,|L1.1148|
000110  f7ffbffe          B.W      __2sprintf
;;;144    }
;;;145    
                          ENDP

                  cmd_capture PROC
;;;148     *---------------------------------------------------------------------------*/
;;;149    static void cmd_capture (char *par) {
000114  b538              PUSH     {r3-r5,lr}
;;;150      char *fname,*next;
;;;151      BOOL append,retv;
;;;152      FILE *f;
;;;153    
;;;154      fname = get_entry (par, &next);
000116  4669              MOV      r1,sp
000118  f7fffffe          BL       get_entry
00011c  0004              MOVS     r4,r0
;;;155      if (fname == NULL) {
00011e  d011              BEQ      |L1.324|
;;;156        printf ("\nFilename missing.\n");
;;;157        return;
;;;158      }
;;;159      append = __FALSE;
;;;160      if (next) {
000120  9800              LDR      r0,[sp,#0]
000122  2500              MOVS     r5,#0                 ;159
000124  b198              CBZ      r0,|L1.334|
;;;161        par = get_entry (next, &next);
000126  4669              MOV      r1,sp
000128  f7fffffe          BL       get_entry
00012c  4605              MOV      r5,r0
;;;162        if ((strcmp (par, "/A") == 0) ||(strcmp (par, "/a") == 0)) {
00012e  a1d4              ADR      r1,|L1.1152|
000130  f7fffffe          BL       strcmp
000134  b140              CBZ      r0,|L1.328|
000136  a1d3              ADR      r1,|L1.1156|
000138  4628              MOV      r0,r5
00013a  f7fffffe          BL       strcmp
00013e  b118              CBZ      r0,|L1.328|
;;;163          append = __TRUE;
;;;164        }
;;;165        else {
;;;166          printf ("\nCommand error.\n");
000140  a0d1              ADR      r0,|L1.1160|
;;;167          return;
000142  e022              B        |L1.394|
                  |L1.324|
000144  a0d5              ADR      r0,|L1.1180|
000146  e020              B        |L1.394|
                  |L1.328|
000148  2501              MOVS     r5,#1                 ;163
;;;168        }
;;;169      }
;;;170      printf ((append) ? "\nAppend data to file %s" :
00014a  a0d9              ADR      r0,|L1.1200|
00014c  e000              B        |L1.336|
                  |L1.334|
;;;171                         "\nCapture data to file %s", fname);
00014e  a0de              ADR      r0,|L1.1224|
                  |L1.336|
000150  4621              MOV      r1,r4
000152  f7fffffe          BL       __2printf
;;;172      printf("\nPress ESC to stop.\n");
000156  a0e3              ADR      r0,|L1.1252|
000158  f7fffffe          BL       __2printf
;;;173      f = fopen (fname,append ? "a" : "w"); /* open a file for writing           */
00015c  a1e7              ADR      r1,|L1.1276|
00015e  b905              CBNZ     r5,|L1.354|
000160  a1e7              ADR      r1,|L1.1280|
                  |L1.354|
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       fopen
000168  0004              MOVS     r4,r0
;;;174      if (f == NULL) {
00016a  d011              BEQ      |L1.400|
                  |L1.364|
;;;175        printf ("\nCan not open file!\n");  /* error when trying to open file    */
;;;176        return;
;;;177      } 
;;;178      do {
;;;179        retv = getline (in_line, sizeof (in_line));
00016c  21a0              MOVS     r1,#0xa0
00016e  48e5              LDR      r0,|L1.1284|
000170  f7fffffe          BL       getline
000174  4605              MOV      r5,r0
;;;180        fputs (in_line, f);
000176  4621              MOV      r1,r4
000178  48e2              LDR      r0,|L1.1284|
00017a  f7fffffe          BL       fputs
;;;181      } while (retv == __TRUE);
00017e  2d01              CMP      r5,#1
000180  d0f4              BEQ      |L1.364|
;;;182      fclose (f);                         /* close the output file               */
000182  4620              MOV      r0,r4
000184  f7fffffe          BL       fclose
;;;183      printf ("\nFile closed.\n");
000188  a0df              ADR      r0,|L1.1288|
                  |L1.394|
00018a  f7fffffe          BL       __2printf
;;;184    }
00018e  bd38              POP      {r3-r5,pc}
                  |L1.400|
000190  a0e1              ADR      r0,|L1.1304|
000192  e7fa              B        |L1.394|
;;;185    
                          ENDP

                  cmd_fill PROC
;;;188     *---------------------------------------------------------------------------*/
;;;189    static void cmd_fill (char *par) {
000194  b57c              PUSH     {r2-r6,lr}
;;;190      char *fname, *next;
;;;191      FILE *f;
;;;192      int i,cnt = 1000;
000196  f44f717a          MOV      r1,#0x3e8
;;;193    
;;;194      fname = get_entry (par, &next);
00019a  9101              STR      r1,[sp,#4]
00019c  4669              MOV      r1,sp
00019e  f7fffffe          BL       get_entry
0001a2  0005              MOVS     r5,r0
;;;195      if (fname == NULL) {
0001a4  d011              BEQ      |L1.458|
;;;196        printf ("\nFilename missing.\n");
;;;197        return;
;;;198      }
;;;199      if (next) {
0001a6  9800              LDR      r0,[sp,#0]
0001a8  b138              CBZ      r0,|L1.442|
;;;200        par = get_entry (next, &next);
0001aa  4669              MOV      r1,sp
0001ac  f7fffffe          BL       get_entry
;;;201        if (sscanf (par,"%d", &cnt) == 0) {
0001b0  aa01              ADD      r2,sp,#4
0001b2  a1b2              ADR      r1,|L1.1148|
0001b4  f7fffffe          BL       __0sscanf
0001b8  b148              CBZ      r0,|L1.462|
                  |L1.442|
;;;202          printf ("\nCommand error.\n");
;;;203          return;
;;;204        }
;;;205      }
;;;206    
;;;207      f = fopen (fname, "w");               /* open a file for writing           */
0001ba  a1d1              ADR      r1,|L1.1280|
0001bc  4628              MOV      r0,r5
0001be  f7fffffe          BL       fopen
0001c2  0006              MOVS     r6,r0
;;;208      if (f == NULL) {
0001c4  d005              BEQ      |L1.466|
;;;209        printf ("\nCan not open file!\n");  /* error when trying to open file    */
;;;210        return;
;;;211      } 
;;;212      for (i = 0; i < cnt; i++)  {
0001c6  2400              MOVS     r4,#0
0001c8  e00c              B        |L1.484|
                  |L1.458|
0001ca  a0b4              ADR      r0,|L1.1180|
0001cc  e011              B        |L1.498|
                  |L1.462|
0001ce  a0ae              ADR      r0,|L1.1160|
0001d0  e00f              B        |L1.498|
                  |L1.466|
0001d2  a0d1              ADR      r0,|L1.1304|
0001d4  e00d              B        |L1.498|
                  |L1.470|
;;;213        fprintf (f, "This is line # %d in file %s\n", i, fname);
0001d6  462b              MOV      r3,r5
0001d8  4622              MOV      r2,r4
0001da  a1d5              ADR      r1,|L1.1328|
0001dc  4630              MOV      r0,r6
0001de  f7fffffe          BL       __2fprintf
0001e2  1c64              ADDS     r4,r4,#1              ;212
                  |L1.484|
0001e4  9801              LDR      r0,[sp,#4]            ;212
0001e6  4284              CMP      r4,r0                 ;212
0001e8  dbf5              BLT      |L1.470|
;;;214      }
;;;215      fclose (f);                         /* close the output file               */
0001ea  4630              MOV      r0,r6
0001ec  f7fffffe          BL       fclose
;;;216      printf ("\nFile closed.\n");
0001f0  a0c5              ADR      r0,|L1.1288|
                  |L1.498|
0001f2  f7fffffe          BL       __2printf
;;;217    }
0001f6  bd7c              POP      {r2-r6,pc}
;;;218    
                          ENDP

                  cmd_type PROC
;;;222     *---------------------------------------------------------------------------*/
;;;223    static void cmd_type (char *par) {
0001f8  b538              PUSH     {r3-r5,lr}
;;;224      char *fname,*next;
;;;225      FILE *f;
;;;226      int ch;
;;;227    
;;;228      fname = get_entry (par, &next);
0001fa  4669              MOV      r1,sp
0001fc  f7fffffe          BL       get_entry
000200  0004              MOVS     r4,r0
;;;229      if (fname == NULL) {
000202  d00a              BEQ      |L1.538|
;;;230        printf ("\nFilename missing.\n");
;;;231        return;
;;;232      }
;;;233      printf("\nRead data from file %s\n",fname);
000204  4601              MOV      r1,r0
000206  a0d2              ADR      r0,|L1.1360|
000208  f7fffffe          BL       __2printf
;;;234      f = fopen (fname,"r");              /* open the file for reading           */
00020c  a1d7              ADR      r1,|L1.1388|
00020e  4620              MOV      r0,r4
000210  f7fffffe          BL       fopen
000214  0004              MOVS     r4,r0
;;;235      if (f == NULL) {
000216  d002              BEQ      |L1.542|
000218  e006              B        |L1.552|
                  |L1.538|
00021a  a0a0              ADR      r0,|L1.1180|
00021c  e00d              B        |L1.570|
                  |L1.542|
;;;236        printf ("\nFile not found!\n");
00021e  a0d4              ADR      r0,|L1.1392|
;;;237        return;
000220  e00b              B        |L1.570|
                  |L1.546|
;;;238      }
;;;239     
;;;240      while ((ch = fgetc (f)) != EOF) {   /* read the characters from the file   */
;;;241        putchar (ch);                     /* and write them on the screen        */
000222  49d8              LDR      r1,|L1.1412|
000224  f7fffffe          BL       putc
                  |L1.552|
000228  4620              MOV      r0,r4                 ;240
00022a  f7fffffe          BL       fgetc
00022e  1c41              ADDS     r1,r0,#1              ;240
000230  d1f7              BNE      |L1.546|
;;;242      }
;;;243      fclose (f);                         /* close the input file when done      */
000232  4620              MOV      r0,r4
000234  f7fffffe          BL       fclose
;;;244      printf ("\nFile closed.\n");
000238  a0b3              ADR      r0,|L1.1288|
                  |L1.570|
00023a  f7fffffe          BL       __2printf
;;;245    }
00023e  bd38              POP      {r3-r5,pc}
;;;246    
                          ENDP

                  cmd_rename PROC
;;;249     *---------------------------------------------------------------------------*/
;;;250    static void cmd_rename (char *par) {
000240  b5f8              PUSH     {r3-r7,lr}
;;;251      char *fname,*fnew,*next,dir;
;;;252    
;;;253      fname = get_entry (par, &next);
000242  4669              MOV      r1,sp
000244  f7fffffe          BL       get_entry
000248  0004              MOVS     r4,r0
;;;254      if (fname == NULL) {
00024a  d014              BEQ      |L1.630|
;;;255        printf ("\nFilename missing.\n");
;;;256        return;
;;;257      }
;;;258      fnew = get_entry (next, &next);
00024c  4669              MOV      r1,sp
00024e  9800              LDR      r0,[sp,#0]
000250  f7fffffe          BL       get_entry
000254  0005              MOVS     r5,r0
;;;259      if (fnew == NULL) {
000256  d010              BEQ      |L1.634|
;;;260        printf ("\nNew Filename missing.\n");
;;;261        return;
;;;262      }
;;;263      if (strcmp (fname,fnew) == 0) {
000258  4601              MOV      r1,r0
00025a  4620              MOV      r0,r4
00025c  f7fffffe          BL       strcmp
000260  b168              CBZ      r0,|L1.638|
;;;264        printf ("\nNew name is the same.\n");
;;;265        return;
;;;266      }
;;;267    
;;;268      dir = 0;
000262  2600              MOVS     r6,#0
;;;269      if (*(fname + strlen(fname) - 1) == '\\') {
000264  4620              MOV      r0,r4
000266  f7fffffe          BL       strlen
00026a  4420              ADD      r0,r0,r4
00026c  f8100c01          LDRB     r0,[r0,#-1]
000270  285c              CMP      r0,#0x5c
000272  d006              BEQ      |L1.642|
000274  e006              B        |L1.644|
                  |L1.630|
000276  a089              ADR      r0,|L1.1180|
000278  e016              B        |L1.680|
                  |L1.634|
00027a  a0c3              ADR      r0,|L1.1416|
00027c  e014              B        |L1.680|
                  |L1.638|
00027e  a0c8              ADR      r0,|L1.1440|
000280  e012              B        |L1.680|
                  |L1.642|
;;;270        dir = 1;
000282  2601              MOVS     r6,#1
                  |L1.644|
;;;271      }
;;;272    
;;;273      if (frename (fname, fnew) == 0) {
000284  4629              MOV      r1,r5
000286  4620              MOV      r0,r4
000288  f7fffffe          BL       frename
00028c  b110              CBZ      r0,|L1.660|
;;;274        if (dir) {
;;;275          printf ("\nDirectory %s renamed to %s\n",fname,fnew);
;;;276        }
;;;277        else {
;;;278          printf ("\nFile %s renamed to %s\n",fname,fnew);
;;;279        }
;;;280      }
;;;281      else {
;;;282        if (dir) {
00028e  b156              CBZ      r6,|L1.678|
;;;283          printf ("\nDirectory rename error.\n");
000290  a0c9              ADR      r0,|L1.1464|
000292  e009              B        |L1.680|
                  |L1.660|
000294  462a              MOV      r2,r5                 ;278
000296  4621              MOV      r1,r4                 ;278
000298  b10e              CBZ      r6,|L1.670|
00029a  a0ce              ADR      r0,|L1.1492|
00029c  e000              B        |L1.672|
                  |L1.670|
00029e  a0d5              ADR      r0,|L1.1524|
                  |L1.672|
0002a0  f7fffffe          BL       __2printf
;;;284        }
;;;285        else {
;;;286          printf ("\nFile rename error.\n");
;;;287        }
;;;288      }
;;;289    }
0002a4  bdf8              POP      {r3-r7,pc}
                  |L1.678|
0002a6  a0d9              ADR      r0,|L1.1548|
                  |L1.680|
0002a8  f7fffffe          BL       __2printf
0002ac  bdf8              POP      {r3-r7,pc}
;;;290    
                          ENDP

                  cmd_copy PROC
;;;293     *---------------------------------------------------------------------------*/
;;;294    static void cmd_copy (char *par) {
0002ae  e92d47f0          PUSH     {r4-r10,lr}
0002b2  f5ad7d02          SUB      sp,sp,#0x208
;;;295      char *fname,*fnew,*fmer,*next;
;;;296      FILE *fin,*fout;
;;;297      U32 cnt,total;
;;;298      char buf[512];
;;;299      BOOL merge;
;;;300    
;;;301      fname = get_entry (par, &next);
0002b6  a980              ADD      r1,sp,#0x200
0002b8  f7fffffe          BL       get_entry
0002bc  0007              MOVS     r7,r0
;;;302      if (fname == NULL) {
0002be  d00d              BEQ      |L1.732|
;;;303        printf ("\nFilename missing.\n");
;;;304        return;
;;;305      }
;;;306      fmer = get_entry (next, &next);
0002c0  a980              ADD      r1,sp,#0x200
0002c2  9880              LDR      r0,[sp,#0x200]
0002c4  f7fffffe          BL       get_entry
0002c8  0005              MOVS     r5,r0
;;;307      if (fmer == NULL) {
0002ca  d009              BEQ      |L1.736|
;;;308        printf ("\nNew Filename missing.\n");
;;;309        return;
;;;310      }
;;;311      fnew = get_entry (next, &next);
0002cc  a980              ADD      r1,sp,#0x200
0002ce  9880              LDR      r0,[sp,#0x200]
0002d0  f7fffffe          BL       get_entry
0002d4  0004              MOVS     r4,r0
;;;312      if (fnew != NULL) {
0002d6  d005              BEQ      |L1.740|
;;;313        merge = __TRUE;
0002d8  2601              MOVS     r6,#1
0002da  e005              B        |L1.744|
                  |L1.732|
0002dc  a06f              ADR      r0,|L1.1180|
0002de  e028              B        |L1.818|
                  |L1.736|
0002e0  a0a9              ADR      r0,|L1.1416|
0002e2  e026              B        |L1.818|
                  |L1.740|
;;;314      }
;;;315      else {
;;;316        merge = __FALSE;
0002e4  2600              MOVS     r6,#0
;;;317        fnew = fmer;
0002e6  462c              MOV      r4,r5
                  |L1.744|
;;;318      }
;;;319      if ((strcmp (fname,fnew) == 0)        ||
0002e8  4621              MOV      r1,r4
0002ea  4638              MOV      r0,r7
0002ec  f7fffffe          BL       strcmp
0002f0  b1f0              CBZ      r0,|L1.816|
;;;320          (merge && strcmp (fmer,fnew) == 0)) {
0002f2  b126              CBZ      r6,|L1.766|
0002f4  4621              MOV      r1,r4
0002f6  4628              MOV      r0,r5
0002f8  f7fffffe          BL       strcmp
0002fc  b1c0              CBZ      r0,|L1.816|
                  |L1.766|
;;;321        printf ("\nNew name is the same.\n");
;;;322        return;
;;;323      }
;;;324    
;;;325      fin = fopen (fname,"r");            /* open the file for reading           */
0002fe  a19b              ADR      r1,|L1.1388|
000300  4638              MOV      r0,r7
000302  f7fffffe          BL       fopen
000306  ea5f0900          MOVS     r9,r0
;;;326      if (fin == NULL) {
00030a  d018              BEQ      |L1.830|
;;;327        printf ("\nFile %s not found!\n",fname);
;;;328        return;
;;;329      }
;;;330    
;;;331      if (merge == __FALSE) {
00030c  b1d6              CBZ      r6,|L1.836|
;;;332        printf ("\nCopy file %s to %s\n",fname,fnew);
;;;333      }
;;;334      else {
;;;335        printf ("\nCopy file %s, %s to %s\n",fname,fmer,fnew);
00030e  4623              MOV      r3,r4
000310  462a              MOV      r2,r5
000312  4639              MOV      r1,r7
000314  a0c3              ADR      r0,|L1.1572|
000316  f7fffffe          BL       __2printf
                  |L1.794|
;;;336      }
;;;337      fout = fopen (fnew,"w");            /* open the file for writing           */
00031a  a179              ADR      r1,|L1.1280|
00031c  4620              MOV      r0,r4
00031e  f7fffffe          BL       fopen
000322  ea5f0800          MOVS     r8,r0
;;;338      if (fout == NULL) {
000326  d013              BEQ      |L1.848|
;;;339        printf ("\nFailed to open %s for writing!\n",fnew);
;;;340        fclose (fin);
;;;341        return;
;;;342      }
;;;343    
;;;344      total = 0;
000328  2400              MOVS     r4,#0
;;;345      while ((cnt = fread (&buf, 1, 512, fin)) != 0) {
00032a  f44f7700          MOV      r7,#0x200
00032e  e01e              B        |L1.878|
                  |L1.816|
000330  a09b              ADR      r0,|L1.1440|
                  |L1.818|
000332  f7fffffe          BL       __2printf
                  |L1.822|
;;;346        fwrite (&buf, 1, cnt, fout);
;;;347        total += cnt;
;;;348      }
;;;349      fclose (fin);                       /* close input file when done          */
;;;350    
;;;351      if (merge == __TRUE) {
;;;352        fin = fopen (fmer,"r");           /* open the file for reading           */
;;;353        if (fin == NULL) {
;;;354          printf ("\nFile %s not found!\n",fmer);
;;;355        }
;;;356        else {
;;;357          while ((cnt = fread (&buf, 1, 512, fin)) != 0) {
;;;358            fwrite (&buf, 1, cnt, fout);
;;;359            total += cnt;
;;;360          }
;;;361          fclose (fin);
;;;362        }
;;;363      }
;;;364      fclose (fout);
;;;365      dot_format (total, &buf[0]);
;;;366      printf ("\n%s bytes copied.\n", &buf[0]);
;;;367    }
000336  f50d7d02          ADD      sp,sp,#0x208
00033a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.830|
00033e  4639              MOV      r1,r7                 ;327
000340  a0bf              ADR      r0,|L1.1600|
000342  e049              B        |L1.984|
                  |L1.836|
000344  4622              MOV      r2,r4                 ;332
000346  4639              MOV      r1,r7                 ;332
000348  a0c3              ADR      r0,|L1.1624|
00034a  f7fffffe          BL       __2printf
00034e  e7e4              B        |L1.794|
                  |L1.848|
000350  4621              MOV      r1,r4                 ;339
000352  a0c7              ADR      r0,|L1.1648|
000354  f7fffffe          BL       __2printf
000358  4648              MOV      r0,r9                 ;340
00035a  f7fffffe          BL       fclose
00035e  e7ea              B        |L1.822|
                  |L1.864|
000360  4602              MOV      r2,r0                 ;346
000362  4643              MOV      r3,r8                 ;346
000364  2101              MOVS     r1,#1                 ;346
000366  4668              MOV      r0,sp                 ;346
000368  f7fffffe          BL       fwrite
00036c  4454              ADD      r4,r4,r10             ;347
                  |L1.878|
00036e  464b              MOV      r3,r9                 ;345
000370  463a              MOV      r2,r7                 ;345
000372  2101              MOVS     r1,#1                 ;345
000374  4668              MOV      r0,sp                 ;345
000376  f7fffffe          BL       fread
00037a  ea5f0a00          MOVS     r10,r0                ;345
00037e  d1ef              BNE      |L1.864|
000380  4648              MOV      r0,r9                 ;349
000382  f7fffffe          BL       fclose
000386  2e01              CMP      r6,#1                 ;351
000388  d11c              BNE      |L1.964|
00038a  a178              ADR      r1,|L1.1388|
00038c  4628              MOV      r0,r5                 ;352
00038e  f7fffffe          BL       fopen
000392  0006              MOVS     r6,r0                 ;352
000394  d10b              BNE      |L1.942|
000396  4629              MOV      r1,r5                 ;354
000398  a0a9              ADR      r0,|L1.1600|
00039a  f7fffffe          BL       __2printf
00039e  e011              B        |L1.964|
                  |L1.928|
0003a0  4602              MOV      r2,r0                 ;358
0003a2  4643              MOV      r3,r8                 ;358
0003a4  2101              MOVS     r1,#1                 ;358
0003a6  4668              MOV      r0,sp                 ;358
0003a8  f7fffffe          BL       fwrite
0003ac  442c              ADD      r4,r4,r5              ;359
                  |L1.942|
0003ae  4633              MOV      r3,r6                 ;357
0003b0  463a              MOV      r2,r7                 ;357
0003b2  2101              MOVS     r1,#1                 ;357
0003b4  4668              MOV      r0,sp                 ;357
0003b6  f7fffffe          BL       fread
0003ba  0005              MOVS     r5,r0                 ;357
0003bc  d1f0              BNE      |L1.928|
0003be  4630              MOV      r0,r6                 ;361
0003c0  f7fffffe          BL       fclose
                  |L1.964|
0003c4  4640              MOV      r0,r8                 ;364
0003c6  f7fffffe          BL       fclose
0003ca  466a              MOV      r2,sp                 ;365
0003cc  4620              MOV      r0,r4                 ;365
0003ce  2100              MOVS     r1,#0                 ;365
0003d0  f7fffffe          BL       dot_format
0003d4  4669              MOV      r1,sp                 ;366
0003d6  a0af              ADR      r0,|L1.1684|
                  |L1.984|
0003d8  f7fffffe          BL       __2printf
0003dc  e7ab              B        |L1.822|
;;;368    
                          ENDP

                  cmd_delete PROC
;;;371     *---------------------------------------------------------------------------*/
;;;372    static void cmd_delete (char *par) {
0003de  b538              PUSH     {r3-r5,lr}
;;;373      char *fname,*next,dir;
;;;374    
;;;375      fname = get_entry (par, &next);
0003e0  4669              MOV      r1,sp
0003e2  f7fffffe          BL       get_entry
0003e6  0004              MOVS     r4,r0
;;;376      if (fname == NULL) {
0003e8  d008              BEQ      |L1.1020|
;;;377        printf ("\nFilename missing.\n");
;;;378        return;
;;;379      }
;;;380    
;;;381      dir = 0;
0003ea  2500              MOVS     r5,#0
;;;382      if (*(fname + strlen(fname) - 1) == '\\') {
0003ec  f7fffffe          BL       strlen
0003f0  4420              ADD      r0,r0,r4
0003f2  f8100c01          LDRB     r0,[r0,#-1]
0003f6  285c              CMP      r0,#0x5c
0003f8  d004              BEQ      |L1.1028|
0003fa  e004              B        |L1.1030|
                  |L1.1020|
0003fc  a027              ADR      r0,|L1.1180|
0003fe  f7fffffe          BL       __2printf
;;;383        dir = 1;
;;;384      }
;;;385    
;;;386      if (fdelete (fname) == 0) {
;;;387        if (dir) {
;;;388          printf ("\nDirectory %s deleted.\n",fname);
;;;389        }
;;;390        else {
;;;391          printf ("\nFile %s deleted.\n",fname);
;;;392        }
;;;393      }
;;;394      else {
;;;395        if (dir) {
;;;396          printf ("\nDirectory %s not found or not empty.\n",fname);
;;;397        }
;;;398        else {
;;;399          printf ("\nFile %s not found.\n",fname);
;;;400        }
;;;401      }
;;;402    }
000402  bd38              POP      {r3-r5,pc}
                  |L1.1028|
000404  2501              MOVS     r5,#1                 ;383
                  |L1.1030|
000406  4620              MOV      r0,r4                 ;386
000408  f7fffffe          BL       fdelete
00040c  b118              CBZ      r0,|L1.1046|
00040e  4621              MOV      r1,r4                 ;399
000410  b14d              CBZ      r5,|L1.1062|
000412  a0a5              ADR      r0,|L1.1704|
000414  e004              B        |L1.1056|
                  |L1.1046|
000416  4621              MOV      r1,r4                 ;391
000418  b10d              CBZ      r5,|L1.1054|
00041a  a0ad              ADR      r0,|L1.1744|
00041c  e000              B        |L1.1056|
                  |L1.1054|
00041e  a0b2              ADR      r0,|L1.1768|
                  |L1.1056|
000420  f7fffffe          BL       __2printf
000424  bd38              POP      {r3-r5,pc}
                  |L1.1062|
000426  a0b5              ADR      r0,|L1.1788|
000428  e7fa              B        |L1.1056|
;;;403    
                          ENDP

                  cmd_dir PROC
;;;406     *---------------------------------------------------------------------------*/
;;;407    static void cmd_dir (char *par) {
00042a  e92d4ff0          PUSH     {r4-r11,lr}
00042e  b0d1              SUB      sp,sp,#0x144
;;;408      U64 fsize;
;;;409      U32 files,dirs,i;
;;;410      char temp[32],*mask,*next,ch;
;;;411      FINFO info;
;;;412    
;;;413      mask = get_entry (par, &next);
000430  a94f              ADD      r1,sp,#0x13c
000432  f7fffffe          BL       get_entry
000436  0005              MOVS     r5,r0
;;;414      if (mask == NULL) {
000438  d100              BNE      |L1.1084|
;;;415        mask = "*.*";
00043a  a5b6              ADR      r5,|L1.1812|
                  |L1.1084|
;;;416      }
;;;417    
;;;418      printf ("\nFile System Directory...");
00043c  a0b6              ADR      r0,|L1.1816|
00043e  f7fffffe          BL       __2printf
;;;419      files = 0;
000442  2000              MOVS     r0,#0
;;;420      dirs  = 0;
000444  4682              MOV      r10,r0
;;;421      fsize = 0;
000446  4681              MOV      r9,r0
000448  4680              MOV      r8,r0
;;;422      info.fileID  = 0;
00044a  4683              MOV      r11,r0
00044c  904e              STR      r0,[sp,#0x138]
00044e  f8ad010c          STRH     r0,[sp,#0x10c]
;;;423      while (ffind (mask,&info) == 0) {
000452  e1d3              B        |L1.2044|
                  |L1.1108|
                          DCD      0x000f4240
                  |L1.1112|
                          DCD      0x3b9aca00
                  |L1.1116|
00045c  25642e00          DCB      "%d.",0
                  |L1.1120|
000460  25303364          DCB      "%03d.",0
000464  2e00    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  25303364          DCB      "%03d.%03d",0
00046c  2e253033
000470  6400    
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
000474  25642e25          DCB      "%d.%03d",0
000478  30336400
                  |L1.1148|
00047c  256400            DCB      "%d",0
00047f  00                DCB      0
                  |L1.1152|
000480  2f4100            DCB      "/A",0
000483  00                DCB      0
                  |L1.1156|
000484  2f6100            DCB      "/a",0
000487  00                DCB      0
                  |L1.1160|
000488  0a436f6d          DCB      "\nCommand error.\n",0
00048c  6d616e64
000490  20657272
000494  6f722e0a
000498  00      
000499  00                DCB      0
00049a  00                DCB      0
00049b  00                DCB      0
                  |L1.1180|
00049c  0a46696c          DCB      "\nFilename missing.\n",0
0004a0  656e616d
0004a4  65206d69
0004a8  7373696e
0004ac  672e0a00
                  |L1.1200|
0004b0  0a417070          DCB      "\nAppend data to file %s",0
0004b4  656e6420
0004b8  64617461
0004bc  20746f20
0004c0  66696c65
0004c4  20257300
                  |L1.1224|
0004c8  0a436170          DCB      "\nCapture data to file %s",0
0004cc  74757265
0004d0  20646174
0004d4  6120746f
0004d8  2066696c
0004dc  65202573
0004e0  00      
0004e1  00                DCB      0
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L1.1252|
0004e4  0a507265          DCB      "\nPress ESC to stop.\n",0
0004e8  73732045
0004ec  53432074
0004f0  6f207374
0004f4  6f702e0a
0004f8  00      
0004f9  00                DCB      0
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L1.1276|
0004fc  6100              DCB      "a",0
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L1.1280|
000500  7700              DCB      "w",0
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
                          DCD      ||.bss||
                  |L1.1288|
000508  0a46696c          DCB      "\nFile closed.\n",0
00050c  6520636c
000510  6f736564
000514  2e0a00  
000517  00                DCB      0
                  |L1.1304|
000518  0a43616e          DCB      "\nCan not open file!\n",0
00051c  206e6f74
000520  206f7065
000524  6e206669
000528  6c65210a
00052c  00      
00052d  00                DCB      0
00052e  00                DCB      0
00052f  00                DCB      0
                  |L1.1328|
000530  54686973          DCB      "This is line # %d in file %s\n",0
000534  20697320
000538  6c696e65
00053c  20232025
000540  6420696e
000544  2066696c
000548  65202573
00054c  0a00    
00054e  00                DCB      0
00054f  00                DCB      0
                  |L1.1360|
000550  0a526561          DCB      "\nRead data from file %s\n",0
000554  64206461
000558  74612066
00055c  726f6d20
000560  66696c65
000564  2025730a
000568  00      
000569  00                DCB      0
00056a  00                DCB      0
00056b  00                DCB      0
                  |L1.1388|
00056c  7200              DCB      "r",0
00056e  00                DCB      0
00056f  00                DCB      0
                  |L1.1392|
000570  0a46696c          DCB      "\nFile not found!\n",0
000574  65206e6f
000578  7420666f
00057c  756e6421
000580  0a00    
000582  00                DCB      0
000583  00                DCB      0
                  |L1.1412|
                          DCD      __stdout
                  |L1.1416|
000588  0a4e6577          DCB      "\nNew Filename missing.\n",0
00058c  2046696c
000590  656e616d
000594  65206d69
000598  7373696e
00059c  672e0a00
                  |L1.1440|
0005a0  0a4e6577          DCB      "\nNew name is the same.\n",0
0005a4  206e616d
0005a8  65206973
0005ac  20746865
0005b0  2073616d
0005b4  652e0a00
                  |L1.1464|
0005b8  0a446972          DCB      "\nDirectory rename error.\n",0
0005bc  6563746f
0005c0  72792072
0005c4  656e616d
0005c8  65206572
0005cc  726f722e
0005d0  0a00    
0005d2  00                DCB      0
0005d3  00                DCB      0
                  |L1.1492|
0005d4  0a446972          DCB      "\nDirectory %s renamed to %s\n",0
0005d8  6563746f
0005dc  72792025
0005e0  73207265
0005e4  6e616d65
0005e8  6420746f
0005ec  2025730a
0005f0  00      
0005f1  00                DCB      0
0005f2  00                DCB      0
0005f3  00                DCB      0
                  |L1.1524|
0005f4  0a46696c          DCB      "\nFile %s renamed to %s\n",0
0005f8  65202573
0005fc  2072656e
000600  616d6564
000604  20746f20
000608  25730a00
                  |L1.1548|
00060c  0a46696c          DCB      "\nFile rename error.\n",0
000610  65207265
000614  6e616d65
000618  20657272
00061c  6f722e0a
000620  00      
000621  00                DCB      0
000622  00                DCB      0
000623  00                DCB      0
                  |L1.1572|
000624  0a436f70          DCB      "\nCopy file %s, %s to %s\n",0
000628  79206669
00062c  6c652025
000630  732c2025
000634  7320746f
000638  2025730a
00063c  00      
00063d  00                DCB      0
00063e  00                DCB      0
00063f  00                DCB      0
                  |L1.1600|
000640  0a46696c          DCB      "\nFile %s not found!\n",0
000644  65202573
000648  206e6f74
00064c  20666f75
000650  6e64210a
000654  00      
000655  00                DCB      0
000656  00                DCB      0
000657  00                DCB      0
                  |L1.1624|
000658  0a436f70          DCB      "\nCopy file %s to %s\n",0
00065c  79206669
000660  6c652025
000664  7320746f
000668  2025730a
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  0a466169          DCB      "\nFailed to open %s for writing!\n",0
000674  6c656420
000678  746f206f
00067c  70656e20
000680  25732066
000684  6f722077
000688  72697469
00068c  6e67210a
000690  00      
000691  00                DCB      0
000692  00                DCB      0
000693  00                DCB      0
                  |L1.1684|
000694  0a257320          DCB      "\n%s bytes copied.\n",0
000698  62797465
00069c  7320636f
0006a0  70696564
0006a4  2e0a00  
0006a7  00                DCB      0
                  |L1.1704|
0006a8  0a446972          DCB      "\nDirectory %s not found or not empty.\n",0
0006ac  6563746f
0006b0  72792025
0006b4  73206e6f
0006b8  7420666f
0006bc  756e6420
0006c0  6f72206e
0006c4  6f742065
0006c8  6d707479
0006cc  2e0a00  
0006cf  00                DCB      0
                  |L1.1744|
0006d0  0a446972          DCB      "\nDirectory %s deleted.\n",0
0006d4  6563746f
0006d8  72792025
0006dc  73206465
0006e0  6c657465
0006e4  642e0a00
                  |L1.1768|
0006e8  0a46696c          DCB      "\nFile %s deleted.\n",0
0006ec  65202573
0006f0  2064656c
0006f4  65746564
0006f8  2e0a00  
0006fb  00                DCB      0
                  |L1.1788|
0006fc  0a46696c          DCB      "\nFile %s not found.\n",0
000700  65202573
000704  206e6f74
000708  20666f75
00070c  6e642e0a
000710  00      
000711  00                DCB      0
000712  00                DCB      0
000713  00                DCB      0
                  |L1.1812|
000714  2a2e2a00          DCB      "*.*",0
                  |L1.1816|
000718  0a46696c          DCB      "\nFile System Directory...",0
00071c  65205379
000720  7374656d
000724  20446972
000728  6563746f
00072c  72792e2e
000730  2e00    
000732  00                DCB      0
000733  00                DCB      0
                  |L1.1844|
;;;424        if (info.attrib & ATTR_DIRECTORY) {
000734  f89d010e          LDRB     r0,[sp,#0x10e]
000738  06c0              LSLS     r0,r0,#27
00073a  d529              BPL      |L1.1936|
;;;425          i = 0;
00073c  2600              MOVS     r6,#0
;;;426          while (strlen((const char *)info.name+i) > 41) {
00073e  e00a              B        |L1.1878|
                  |L1.1856|
;;;427            ch = info.name[i+41];
000740  f8947029          LDRB     r7,[r4,#0x29]
;;;428            info.name[i+41] = 0;
000744  f884b029          STRB     r11,[r4,#0x29]
000748  4621              MOV      r1,r4
;;;429            printf ("\n%-41s", &info.name[i]);
00074a  a0c1              ADR      r0,|L1.2640|
00074c  f7fffffe          BL       __2printf
;;;430            info.name[i+41] = ch;
000750  f8847029          STRB     r7,[r4,#0x29]
;;;431            i += 41;
000754  3629              ADDS     r6,r6,#0x29
                  |L1.1878|
000756  a802              ADD      r0,sp,#8              ;426
000758  1984              ADDS     r4,r0,r6              ;426
00075a  4620              MOV      r0,r4                 ;426
00075c  f7fffffe          BL       strlen
000760  2829              CMP      r0,#0x29              ;426
000762  d8ed              BHI      |L1.1856|
000764  4621              MOV      r1,r4                 ;426
;;;432          }
;;;433          printf ("\n%-41s    <DIR>       ", &info.name[i]);
000766  a0bc              ADR      r0,|L1.2648|
000768  f7fffffe          BL       __2printf
;;;434          printf ("  %02d.%02d.%04d  %02d:%02d",
00076c  f89d3111          LDRB     r3,[sp,#0x111]
000770  f89d2110          LDRB     r2,[sp,#0x110]
000774  e9cd2300          STRD     r2,r3,[sp,#0]
000778  f8bd3116          LDRH     r3,[sp,#0x116]
00077c  f89d2114          LDRB     r2,[sp,#0x114]
000780  f89d1113          LDRB     r1,[sp,#0x113]
000784  a0ba              ADR      r0,|L1.2672|
000786  f7fffffe          BL       __2printf
;;;435                   info.time.day, info.time.mon, info.time.year,
;;;436                   info.time.hr, info.time.min);
;;;437          dirs++;
00078a  f10a0a01          ADD      r10,r10,#1
00078e  e035              B        |L1.2044|
                  |L1.1936|
;;;438        }
;;;439        else {
;;;440          dot_format (info.size, &temp[0]);
000790  aa46              ADD      r2,sp,#0x118
000792  2100              MOVS     r1,#0
000794  9842              LDR      r0,[sp,#0x108]
000796  f7fffffe          BL       dot_format
;;;441          i = 0;
00079a  2600              MOVS     r6,#0
;;;442          while (strlen((const char *)info.name+i) > 41) {
00079c  e00b              B        |L1.1974|
;;;443            ch = info.name[i+41];
00079e  bf00              NOP      
                  |L1.1952|
0007a0  f8947029          LDRB     r7,[r4,#0x29]
;;;444            info.name[i+41] = 0;
0007a4  f884b029          STRB     r11,[r4,#0x29]
0007a8  4621              MOV      r1,r4
;;;445            printf ("\n%-41s", &info.name[i]);
0007aa  a0a9              ADR      r0,|L1.2640|
0007ac  f7fffffe          BL       __2printf
;;;446            info.name[i+41] = ch;
0007b0  f8847029          STRB     r7,[r4,#0x29]
;;;447            i += 41;
0007b4  3629              ADDS     r6,r6,#0x29
                  |L1.1974|
0007b6  a802              ADD      r0,sp,#8              ;442
0007b8  4430              ADD      r0,r0,r6              ;442
0007ba  4604              MOV      r4,r0                 ;442
0007bc  f7fffffe          BL       strlen
0007c0  2829              CMP      r0,#0x29              ;442
0007c2  d8ed              BHI      |L1.1952|
;;;448          }
;;;449          printf ("\n%-41s %14s ", &info.name[i], temp);
0007c4  aa46              ADD      r2,sp,#0x118
0007c6  4621              MOV      r1,r4
0007c8  a0b0              ADR      r0,|L1.2700|
0007ca  f7fffffe          BL       __2printf
;;;450          printf ("  %02d.%02d.%04d  %02d:%02d",
0007ce  f89d3111          LDRB     r3,[sp,#0x111]
0007d2  f89d2110          LDRB     r2,[sp,#0x110]
0007d6  e9cd2300          STRD     r2,r3,[sp,#0]
0007da  f8bd3116          LDRH     r3,[sp,#0x116]
0007de  f89d2114          LDRB     r2,[sp,#0x114]
0007e2  f89d1113          LDRB     r1,[sp,#0x113]
0007e6  a0a2              ADR      r0,|L1.2672|
0007e8  f7fffffe          BL       __2printf
;;;451                   info.time.day, info.time.mon, info.time.year,
;;;452                   info.time.hr, info.time.min);
;;;453          fsize += info.size;
0007ec  9842              LDR      r0,[sp,#0x108]
0007ee  eb100909          ADDS     r9,r0,r9
;;;454          files++;
0007f2  984e              LDR      r0,[sp,#0x138]
0007f4  f1480800          ADC      r8,r8,#0              ;453
0007f8  1c40              ADDS     r0,r0,#1
0007fa  904e              STR      r0,[sp,#0x138]
                  |L1.2044|
0007fc  a902              ADD      r1,sp,#8              ;423
0007fe  4628              MOV      r0,r5                 ;423
000800  f7fffffe          BL       ffind
000804  2800              CMP      r0,#0                 ;423
000806  d095              BEQ      |L1.1844|
;;;455        }
;;;456      }
;;;457      if (info.fileID == 0) {
000808  f8bd010c          LDRH     r0,[sp,#0x10c]
00080c  b1d0              CBZ      r0,|L1.2116|
;;;458        printf ("\nNo files...");
;;;459      }
;;;460      else {
;;;461        dot_format (fsize, &temp[0]);
00080e  aa46              ADD      r2,sp,#0x118
000810  4648              MOV      r0,r9
000812  4641              MOV      r1,r8
000814  f7fffffe          BL       dot_format
;;;462        printf ("\n              %9d File(s)    %21s bytes", files, temp);
000818  aa46              ADD      r2,sp,#0x118
00081a  a0a0              ADR      r0,|L1.2716|
00081c  994e              LDR      r1,[sp,#0x138]
00081e  f7fffffe          BL       __2printf
                  |L1.2082|
;;;463      }
;;;464      dot_format (ffree(""), &temp[0]);
000822  a09d              ADR      r0,|L1.2712|
000824  f7fffffe          BL       ffree
000828  aa46              ADD      r2,sp,#0x118
00082a  f7fffffe          BL       dot_format
;;;465      if (dirs) {
00082e  ea5f000a          MOVS     r0,r10
000832  d00b              BEQ      |L1.2124|
;;;466        printf ("\n              %9d Dir(s)     %21s bytes free.\n", dirs, temp);
000834  4601              MOV      r1,r0
000836  aa46              ADD      r2,sp,#0x118
000838  a0a3              ADR      r0,|L1.2760|
00083a  f7fffffe          BL       __2printf
                  |L1.2110|
;;;467      }
;;;468      else {
;;;469        printf ("\n%56s bytes free.\n",temp);
;;;470      }
;;;471    }
00083e  b051              ADD      sp,sp,#0x144
000840  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2116|
000844  a0ac              ADR      r0,|L1.2808|
000846  f7fffffe          BL       __2printf
00084a  e7ea              B        |L1.2082|
                  |L1.2124|
00084c  a946              ADD      r1,sp,#0x118          ;469
00084e  a0ae              ADR      r0,|L1.2824|
000850  f7fffffe          BL       __2printf
000854  e7f3              B        |L1.2110|
;;;472    
                          ENDP

                  cmd_format PROC
;;;475     *---------------------------------------------------------------------------*/
;;;476    static void cmd_format (char *par) {
000856  b530              PUSH     {r4,r5,lr}
000858  b087              SUB      sp,sp,#0x1c
;;;477      char *label,*next,*opt;
;;;478      char arg[20];
;;;479      U32 retv;
;;;480    
;;;481      label = get_entry (par, &next);
00085a  a905              ADD      r1,sp,#0x14
00085c  f7fffffe          BL       get_entry
000860  0004              MOVS     r4,r0
;;;482      if (label == NULL) {
000862  d100              BNE      |L1.2150|
;;;483        label = "KEIL";
000864  a4ad              ADR      r4,|L1.2844|
                  |L1.2150|
;;;484      }
;;;485      strcpy (arg, label);
000866  4621              MOV      r1,r4
000868  4668              MOV      r0,sp
00086a  f7fffffe          BL       strcpy
;;;486      opt = get_entry (next, &next);
00086e  a905              ADD      r1,sp,#0x14
000870  9805              LDR      r0,[sp,#0x14]
000872  f7fffffe          BL       get_entry
000876  0005              MOVS     r5,r0
;;;487      if (opt != NULL) {
000878  d00c              BEQ      |L1.2196|
;;;488        if ((strcmp (opt, "/FAT32") == 0) ||(strcmp (opt, "/fat32") == 0)) {
00087a  a1aa              ADR      r1,|L1.2852|
00087c  f7fffffe          BL       strcmp
000880  b120              CBZ      r0,|L1.2188|
000882  a1aa              ADR      r1,|L1.2860|
000884  4628              MOV      r0,r5
000886  f7fffffe          BL       strcmp
00088a  b918              CBNZ     r0,|L1.2196|
                  |L1.2188|
;;;489          strcat (arg, "/FAT32");
00088c  a1a5              ADR      r1,|L1.2852|
00088e  4668              MOV      r0,sp
000890  f7fffffe          BL       strcat
                  |L1.2196|
;;;490        }
;;;491      }
;;;492      printf ("\nFormat Flash Memory Card? [Y/N]\n");
000894  a0a7              ADR      r0,|L1.2868|
000896  f7fffffe          BL       __2printf
;;;493      retv = getkey();
00089a  f7fffffe          BL       getkey
;;;494      if (retv == 'y' || retv == 'Y') {
00089e  2879              CMP      r0,#0x79
0008a0  d001              BEQ      |L1.2214|
0008a2  2859              CMP      r0,#0x59
0008a4  d106              BNE      |L1.2228|
                  |L1.2214|
;;;495        /* Format the Card with Label "KEIL". "*/
;;;496        if (fformat (arg) == 0) {
0008a6  4668              MOV      r0,sp
0008a8  f7fffffe          BL       fformat
0008ac  b120              CBZ      r0,|L1.2232|
;;;497          printf ("Memory Card Formatted.\n");
;;;498          printf ("Card Label is %s\n",label);
;;;499        }
;;;500        else {
;;;501          printf ("Formatting failed.\n");
0008ae  a0aa              ADR      r0,|L1.2904|
0008b0  f7fffffe          BL       __2printf
                  |L1.2228|
;;;502        }
;;;503      }
;;;504    }
0008b4  b007              ADD      sp,sp,#0x1c
0008b6  bd30              POP      {r4,r5,pc}
                  |L1.2232|
0008b8  a0ac              ADR      r0,|L1.2924|
0008ba  f7fffffe          BL       __2printf
0008be  4621              MOV      r1,r4                 ;498
0008c0  a0b0              ADR      r0,|L1.2948|
0008c2  f7fffffe          BL       __2printf
0008c6  e7f5              B        |L1.2228|
;;;505    
                          ENDP

                  cmd_help PROC
;;;508     *---------------------------------------------------------------------------*/
;;;509    static void cmd_help (char *par) {
0008c8  48b3              LDR      r0,|L1.2968|
;;;510      printf (help);
0008ca  f7ffbffe          B.W      __2printf
;;;511    }
;;;512    
                          ENDP

                  init_card PROC
;;;515     *---------------------------------------------------------------------------*/
;;;516    static void init_card (void) {
0008ce  b500              PUSH     {lr}
0008d0  b08b              SUB      sp,sp,#0x2c
;;;517      U32 retv;
;;;518      MMCFG SDCardCfg;
;;;519      char outBuf[26];
;;;520    
;;;521      GLCD_SetBackColor (White);
0008d2  f64f70ff          MOV      r0,#0xffff
0008d6  f7fffffe          BL       GLCD_SetBackColor
;;;522      GLCD_SetTextColor (Blue);
0008da  201f              MOVS     r0,#0x1f
0008dc  f7fffffe          BL       GLCD_SetTextColor
;;;523      GLCD_ClearLn (5);
0008e0  2005              MOVS     r0,#5
0008e2  f7fffffe          BL       GLCD_ClearLn
;;;524      GLCD_ClearLn (6);
0008e6  2006              MOVS     r0,#6
0008e8  f7fffffe          BL       GLCD_ClearLn
;;;525      GLCD_ClearLn (7);
0008ec  2007              MOVS     r0,#7
0008ee  f7fffffe          BL       GLCD_ClearLn
;;;526      GLCD_ClearLn (8);
0008f2  2008              MOVS     r0,#8
0008f4  f7fffffe          BL       GLCD_ClearLn
;;;527    
;;;528      while ((retv = finit ()) != 0) {            /* Wait until the Card is ready*/
0008f8  e00b              B        |L1.2322|
                  |L1.2298|
;;;529        if (retv == 1) {
0008fa  2801              CMP      r0,#1
0008fc  d03f              BEQ      |L1.2430|
;;;530          printf ("\nSD/MMC Init Failed");
;;;531          printf ("\nInsert Memory card and press key...\n");
;;;532          getkey ();
;;;533        }
;;;534        else {
;;;535          printf ("\nSD/MMC Card is Unformatted");
0008fe  a0a7              ADR      r0,|L1.2972|
000900  f7fffffe          BL       __2printf
;;;536          strcpy (&in_line[0], "KEIL\r\n");
000904  a1ac              ADR      r1,|L1.3000|
000906  48ae              LDR      r0,|L1.3008|
000908  f7fffffe          BL       strcpy
;;;537          cmd_format (&in_line[0]);
00090c  48ac              LDR      r0,|L1.3008|
00090e  f7fffffe          BL       cmd_format
                  |L1.2322|
000912  f7fffffe          BL       finit
000916  2800              CMP      r0,#0                 ;528
000918  d1ef              BNE      |L1.2298|
;;;538        }
;;;539      }
;;;540    
;;;541      mmc_read_config (&SDCardCfg);
00091a  a807              ADD      r0,sp,#0x1c
00091c  f7fffffe          BL       mmc_read_config
;;;542    
;;;543      outBuf[0] = 0;
000920  2000              MOVS     r0,#0
000922  f88d0000          STRB     r0,[sp,#0]
;;;544      sprintf (&outBuf[0], " SerNr:  0x%08X", SDCardCfg.sernum);
000926  a1a7              ADR      r1,|L1.3012|
000928  4668              MOV      r0,sp
00092a  9a07              LDR      r2,[sp,#0x1c]
00092c  f7fffffe          BL       __2sprintf
;;;545      GLCD_DisplayString (5, 0, (unsigned char *)outBuf);
000930  466a              MOV      r2,sp
000932  2100              MOVS     r1,#0
000934  2005              MOVS     r0,#5
000936  f7fffffe          BL       GLCD_DisplayString
;;;546      sprintf (&outBuf[0], " BlockNr:0x%08X", SDCardCfg.blocknr);
00093a  a1a6              ADR      r1,|L1.3028|
00093c  4668              MOV      r0,sp
00093e  9a08              LDR      r2,[sp,#0x20]
000940  f7fffffe          BL       __2sprintf
;;;547      GLCD_DisplayString (6, 0, (unsigned char *)outBuf);
000944  466a              MOV      r2,sp
000946  2100              MOVS     r1,#0
000948  2006              MOVS     r0,#6
00094a  f7fffffe          BL       GLCD_DisplayString
;;;548      sprintf (&outBuf[0], " RdLen:  0x%04X", SDCardCfg.read_blen);
00094e  f8bd2024          LDRH     r2,[sp,#0x24]
000952  a1a4              ADR      r1,|L1.3044|
000954  4668              MOV      r0,sp
000956  f7fffffe          BL       __2sprintf
;;;549      GLCD_DisplayString (7, 0, (unsigned char *)outBuf);
00095a  466a              MOV      r2,sp
00095c  2100              MOVS     r1,#0
00095e  2007              MOVS     r0,#7
000960  f7fffffe          BL       GLCD_DisplayString
;;;550      sprintf(&outBuf[0], " WrLen:  0x%04X", SDCardCfg.write_blen);
000964  f8bd2026          LDRH     r2,[sp,#0x26]
000968  a1a2              ADR      r1,|L1.3060|
00096a  4668              MOV      r0,sp
00096c  f7fffffe          BL       __2sprintf
;;;551      GLCD_DisplayString (8, 0, (unsigned char *)outBuf);
000970  466a              MOV      r2,sp
000972  2100              MOVS     r1,#0
000974  2008              MOVS     r0,#8
000976  f7fffffe          BL       GLCD_DisplayString
;;;552    }
00097a  b00b              ADD      sp,sp,#0x2c
00097c  bd00              POP      {pc}
                  |L1.2430|
00097e  a0a1              ADR      r0,|L1.3076|
000980  f7fffffe          BL       __2printf
000984  a0a4              ADR      r0,|L1.3096|
000986  f7fffffe          BL       __2printf
00098a  f7fffffe          BL       getkey
00098e  e7c0              B        |L1.2322|
;;;553    
                          ENDP

                  main PROC
;;;556     *---------------------------------------------------------------------------*/
;;;557    int main (void) {
000990  b508              PUSH     {r3,lr}
;;;558      char *sp,*cp,*next;
;;;559      U32 i;
;;;560    
;;;561      SystemInit();                               /* initialize clocks           */
000992  f7fffffe          BL       SystemInit
000996  f7fffffe          BL       GLCD_Init
00099a  f64f70ff          MOV      r0,#0xffff
00099e  f7fffffe          BL       GLCD_Clear
0009a2  201f              MOVS     r0,#0x1f
0009a4  f7fffffe          BL       GLCD_SetTextColor
0009a8  a2a5              ADR      r2,|L1.3136|
0009aa  2102              MOVS     r1,#2
0009ac  2001              MOVS     r0,#1
0009ae  f7fffffe          BL       GLCD_DisplayString
0009b2  2102              MOVS     r1,#2
0009b4  a2a5              ADR      r2,|L1.3148|
0009b6  4608              MOV      r0,r1
0009b8  f7fffffe          BL       GLCD_DisplayString
;;;562      init_display();                             /* initialize the display      */
;;;563      SER_init (1);                               /* initialize serial interface */
0009bc  2001              MOVS     r0,#1
0009be  f7fffffe          BL       SER_init
;;;564    
;;;565      printf (intro);                             /* display example info        */
0009c2  4875              LDR      r0,|L1.2968|
0009c4  389d              SUBS     r0,r0,#0x9d
0009c6  f7fffffe          BL       __2printf
;;;566      printf (help);
0009ca  4873              LDR      r0,|L1.2968|
0009cc  f7fffffe          BL       __2printf
;;;567    
;;;568      init_card ();
0009d0  f7fffffe          BL       init_card
;;;569      while (1) {
;;;570        printf ("\nCmd> ");                       /* display prompt              */
;;;571        fflush (stdout);
;;;572                                                  /* get command line input      */
;;;573        if (getline (in_line, sizeof (in_line)) == __FALSE) {
;;;574          continue;
;;;575        }
;;;576    
;;;577        sp = get_entry (&in_line[0], &next);
;;;578        if (*sp == 0) {
;;;579          continue;
;;;580        }
;;;581        for (cp = sp; *cp && *cp != ' '; cp++) {
;;;582          *cp = toupper (*cp);                    /* command to upper-case       */
;;;583        }
;;;584        for (i = 0; i < CMD_COUNT; i++) {
;;;585          if (strcmp (sp, (const char *)&cmd[i].val)) {
0009d4  4fa1              LDR      r7,|L1.3164|
                  |L1.2518|
0009d6  a0a2              ADR      r0,|L1.3168|
0009d8  f7fffffe          BL       __2printf
0009dc  48a2              LDR      r0,|L1.3176|
0009de  f7fffffe          BL       fflush
0009e2  21a0              MOVS     r1,#0xa0              ;573
0009e4  4876              LDR      r0,|L1.3008|
0009e6  f7fffffe          BL       getline
0009ea  2800              CMP      r0,#0                 ;573
0009ec  d0f3              BEQ      |L1.2518|
0009ee  4669              MOV      r1,sp                 ;577
0009f0  4873              LDR      r0,|L1.3008|
0009f2  f7fffffe          BL       get_entry
0009f6  4606              MOV      r6,r0                 ;577
0009f8  7800              LDRB     r0,[r0,#0]            ;578
0009fa  2800              CMP      r0,#0                 ;578
0009fc  d0eb              BEQ      |L1.2518|
0009fe  4635              MOV      r5,r6                 ;581
000a00  e004              B        |L1.2572|
000a02  bf00              NOP                            ;582
                  |L1.2564|
000a04  f7fffffe          BL       toupper
000a08  f8050b01          STRB     r0,[r5],#1            ;582
                  |L1.2572|
000a0c  7828              LDRB     r0,[r5,#0]            ;581
000a0e  b108              CBZ      r0,|L1.2580|
000a10  2820              CMP      r0,#0x20              ;581
000a12  d1f7              BNE      |L1.2564|
                  |L1.2580|
000a14  f05f0400          MOVS.W   r4,#0                 ;584
                  |L1.2584|
000a18  eb040044          ADD      r0,r4,r4,LSL #1
000a1c  eb070180          ADD      r1,r7,r0,LSL #2
000a20  4630              MOV      r0,r6
000a22  f7fffffe          BL       strcmp
000a26  b140              CBZ      r0,|L1.2618|
000a28  1c64              ADDS     r4,r4,#1              ;584
000a2a  2c0a              CMP      r4,#0xa               ;584
000a2c  d3f4              BCC      |L1.2584|
                  |L1.2606|
;;;586            continue;
;;;587          }
;;;588          init_card();                            /* check if card is removed    */
;;;589          cmd[i].func (next);                     /* execute command function    */
;;;590          break;
;;;591        }
;;;592        if (i == CMD_COUNT) {
000a2e  2c0a              CMP      r4,#0xa
000a30  d1d1              BNE      |L1.2518|
;;;593          printf ("\nCommand error\n");
000a32  a08e              ADR      r0,|L1.3180|
000a34  f7fffffe          BL       __2printf
000a38  e7cd              B        |L1.2518|
                  |L1.2618|
000a3a  f7fffffe          BL       init_card
000a3e  eb040044          ADD      r0,r4,r4,LSL #1       ;589
000a42  eb070080          ADD      r0,r7,r0,LSL #2       ;589
000a46  6881              LDR      r1,[r0,#8]            ;589
000a48  9800              LDR      r0,[sp,#0]            ;589
000a4a  4788              BLX      r1                    ;589
000a4c  e7ef              B        |L1.2606|
;;;594        }
;;;595      }
;;;596    }
;;;597    
                          ENDP

000a4e  0000              DCW      0x0000
                  |L1.2640|
000a50  0a252d34          DCB      "\n%-41s",0
000a54  317300  
000a57  00                DCB      0
                  |L1.2648|
000a58  0a252d34          DCB      "\n%-41s    <DIR>       ",0
000a5c  31732020
000a60  20203c44
000a64  49523e20
000a68  20202020
000a6c  202000  
000a6f  00                DCB      0
                  |L1.2672|
000a70  20202530          DCB      "  %02d.%02d.%04d  %02d:%02d",0
000a74  32642e25
000a78  3032642e
000a7c  25303464
000a80  20202530
000a84  32643a25
000a88  30326400
                  |L1.2700|
000a8c  0a252d34          DCB      "\n%-41s %14s "
000a90  31732025
000a94  31347320
                  |L1.2712|
000a98  00                DCB      0
000a99  00                DCB      0
000a9a  00                DCB      0
000a9b  00                DCB      0
                  |L1.2716|
000a9c  0a202020          DCB      "\n              %9d File(s)    %21s bytes",0
000aa0  20202020
000aa4  20202020
000aa8  20202025
000aac  39642046
000ab0  696c6528
000ab4  73292020
000ab8  20202532
000abc  31732062
000ac0  79746573
000ac4  00      
000ac5  00                DCB      0
000ac6  00                DCB      0
000ac7  00                DCB      0
                  |L1.2760|
000ac8  0a202020          DCB      "\n              %9d Dir(s)     %21s bytes free.\n",0
000acc  20202020
000ad0  20202020
000ad4  20202025
000ad8  39642044
000adc  69722873
000ae0  29202020
000ae4  20202532
000ae8  31732062
000aec  79746573
000af0  20667265
000af4  652e0a00
                  |L1.2808|
000af8  0a4e6f20          DCB      "\nNo files...",0
000afc  66696c65
000b00  732e2e2e
000b04  00      
000b05  00                DCB      0
000b06  00                DCB      0
000b07  00                DCB      0
                  |L1.2824|
000b08  0a253536          DCB      "\n%56s bytes free.\n",0
000b0c  73206279
000b10  74657320
000b14  66726565
000b18  2e0a00  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  4b45494c          DCB      "KEIL",0
000b20  00      
000b21  00                DCB      0
000b22  00                DCB      0
000b23  00                DCB      0
                  |L1.2852|
000b24  2f464154          DCB      "/FAT32",0
000b28  333200  
000b2b  00                DCB      0
                  |L1.2860|
000b2c  2f666174          DCB      "/fat32",0
000b30  333200  
000b33  00                DCB      0
                  |L1.2868|
000b34  0a466f72          DCB      "\nFormat Flash Memory Card? [Y/N]\n",0
000b38  6d617420
000b3c  466c6173
000b40  68204d65
000b44  6d6f7279
000b48  20436172
000b4c  643f205b
000b50  592f4e5d
000b54  0a00    
000b56  00                DCB      0
000b57  00                DCB      0
                  |L1.2904|
000b58  466f726d          DCB      "Formatting failed.\n",0
000b5c  61747469
000b60  6e672066
000b64  61696c65
000b68  642e0a00
                  |L1.2924|
000b6c  4d656d6f          DCB      "Memory Card Formatted.\n",0
000b70  72792043
000b74  61726420
000b78  466f726d
000b7c  61747465
000b80  642e0a00
                  |L1.2948|
000b84  43617264          DCB      "Card Label is %s\n",0
000b88  204c6162
000b8c  656c2069
000b90  73202573
000b94  0a00    
000b96  00                DCB      0
000b97  00                DCB      0
                  |L1.2968|
                          DCD      ||.constdata||+0x9d
                  |L1.2972|
000b9c  0a53442f          DCB      "\nSD/MMC Card is Unformatted",0
000ba0  4d4d4320
000ba4  43617264
000ba8  20697320
000bac  556e666f
000bb0  726d6174
000bb4  74656400
                  |L1.3000|
000bb8  4b45494c          DCB      "KEIL\r\n",0
000bbc  0d0a00  
000bbf  00                DCB      0
                  |L1.3008|
                          DCD      ||.bss||
                  |L1.3012|
000bc4  20536572          DCB      " SerNr:  0x%08X",0
000bc8  4e723a20
000bcc  20307825
000bd0  30385800
                  |L1.3028|
000bd4  20426c6f          DCB      " BlockNr:0x%08X",0
000bd8  636b4e72
000bdc  3a307825
000be0  30385800
                  |L1.3044|
000be4  2052644c          DCB      " RdLen:  0x%04X",0
000be8  656e3a20
000bec  20307825
000bf0  30345800
                  |L1.3060|
000bf4  2057724c          DCB      " WrLen:  0x%04X",0
000bf8  656e3a20
000bfc  20307825
000c00  30345800
                  |L1.3076|
000c04  0a53442f          DCB      "\nSD/MMC Init Failed",0
000c08  4d4d4320
000c0c  496e6974
000c10  20466169
000c14  6c656400
                  |L1.3096|
000c18  0a496e73          DCB      "\nInsert Memory card and press key...\n",0
000c1c  65727420
000c20  4d656d6f
000c24  72792063
000c28  61726420
000c2c  616e6420
000c30  70726573
000c34  73206b65
000c38  792e2e2e
000c3c  0a00    
000c3e  00                DCB      0
000c3f  00                DCB      0
                  |L1.3136|
000c40  20202020          DCB      "     RL-ARM",0
000c44  20524c2d
000c48  41524d00
                  |L1.3148|
000c4c  53445f46          DCB      "SD_File example",0
000c50  696c6520
000c54  6578616d
000c58  706c6500
                  |L1.3164|
                          DCD      ||.constdata||+0x4f4
                  |L1.3168|
000c60  0a436d64          DCB      "\nCmd> ",0
000c64  3e2000  
000c67  00                DCB      0
                  |L1.3176|
                          DCD      __stdout
                  |L1.3180|
000c6c  0a436f6d          DCB      "\nCommand error\n",0
000c70  6d616e64
000c74  20657272
000c78  6f720a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  in_line
                          %        160

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  intro
000000  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
000004  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
000008  2b2d2d2d          DCB      0x2b,0x2d,0x2d,0x2d
00000c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000010  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000014  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000018  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00001c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000020  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000024  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000028  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00002c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000030  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000034  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000038  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00003c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000040  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000044  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000048  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00004c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000050  2b0a7c20          DCB      0x2b,0x0a,0x7c,0x20
000054  20202020          DCB      0x20,0x20,0x20,0x20
000058  20202020          DCB      0x20,0x20,0x20,0x20
00005c  20202020          DCB      0x20,0x20,0x20,0x20
000060  20202053          DCB      0x20,0x20,0x20,0x53
000064  442f4d4d          DCB      0x44,0x2f,0x4d,0x4d
000068  43204361          DCB      0x43,0x20,0x43,0x61
00006c  72642046          DCB      0x72,0x64,0x20,0x46
000070  696c6520          DCB      0x69,0x6c,0x65,0x20
000074  4d616e69          DCB      0x4d,0x61,0x6e,0x69
000078  70756c61          DCB      0x70,0x75,0x6c,0x61
00007c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000080  20657861          DCB      0x20,0x65,0x78,0x61
000084  6d706c65          DCB      0x6d,0x70,0x6c,0x65
000088  20202020          DCB      0x20,0x20,0x20,0x20
00008c  20202020          DCB      0x20,0x20,0x20,0x20
000090  20202020          DCB      0x20,0x20,0x20,0x20
000094  20202020          DCB      0x20,0x20,0x20,0x20
000098  20207c0a          DCB      0x20,0x20,0x7c,0x0a
00009c  00                DCB      0x00
                  help
00009d  2b2063            DCB      0x2b,0x20,0x63
0000a0  6f6d6d61          DCB      0x6f,0x6d,0x6d,0x61
0000a4  6e64202d          DCB      0x6e,0x64,0x20,0x2d
0000a8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000ac  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000b0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000b4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000b8  2d2b2066          DCB      0x2d,0x2b,0x20,0x66
0000bc  756e6374          DCB      0x75,0x6e,0x63,0x74
0000c0  696f6e20          DCB      0x69,0x6f,0x6e,0x20
0000c4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000c8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000cc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000d0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000d4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000d8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000dc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000e0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000e4  2d2b0a7c          DCB      0x2d,0x2b,0x0a,0x7c
0000e8  20434150          DCB      0x20,0x43,0x41,0x50
0000ec  2022666e          DCB      0x20,0x22,0x66,0x6e
0000f0  616d6522          DCB      0x61,0x6d,0x65,0x22
0000f4  205b2f41          DCB      0x20,0x5b,0x2f,0x41
0000f8  5d202020          DCB      0x5d,0x20,0x20,0x20
0000fc  20202020          DCB      0x20,0x20,0x20,0x20
000100  2020207c          DCB      0x20,0x20,0x20,0x7c
000104  20636170          DCB      0x20,0x63,0x61,0x70
000108  74757265          DCB      0x74,0x75,0x72,0x65
00010c  73207365          DCB      0x73,0x20,0x73,0x65
000110  7269616c          DCB      0x72,0x69,0x61,0x6c
000114  20646174          DCB      0x20,0x64,0x61,0x74
000118  6120746f          DCB      0x61,0x20,0x74,0x6f
00011c  20612066          DCB      0x20,0x61,0x20,0x66
000120  696c6520          DCB      0x69,0x6c,0x65,0x20
000124  20202020          DCB      0x20,0x20,0x20,0x20
000128  20202020          DCB      0x20,0x20,0x20,0x20
00012c  2020207c          DCB      0x20,0x20,0x20,0x7c
000130  0a7c2020          DCB      0x0a,0x7c,0x20,0x20
000134  20202020          DCB      0x20,0x20,0x20,0x20
000138  20202020          DCB      0x20,0x20,0x20,0x20
00013c  20202020          DCB      0x20,0x20,0x20,0x20
000140  20202020          DCB      0x20,0x20,0x20,0x20
000144  20202020          DCB      0x20,0x20,0x20,0x20
000148  20202020          DCB      0x20,0x20,0x20,0x20
00014c  207c2020          DCB      0x20,0x7c,0x20,0x20
000150  5b2f4120          DCB      0x5b,0x2f,0x41,0x20
000154  6f707469          DCB      0x6f,0x70,0x74,0x69
000158  6f6e2061          DCB      0x6f,0x6e,0x20,0x61
00015c  7070656e          DCB      0x70,0x70,0x65,0x6e
000160  64732064          DCB      0x64,0x73,0x20,0x64
000164  61746120          DCB      0x61,0x74,0x61,0x20
000168  746f2061          DCB      0x74,0x6f,0x20,0x61
00016c  2066696c          DCB      0x20,0x66,0x69,0x6c
000170  655d2020          DCB      0x65,0x5d,0x20,0x20
000174  20202020          DCB      0x20,0x20,0x20,0x20
000178  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
00017c  2046494c          DCB      0x20,0x46,0x49,0x4c
000180  4c202266          DCB      0x4c,0x20,0x22,0x66
000184  6e616d65          DCB      0x6e,0x61,0x6d,0x65
000188  22205b6e          DCB      0x22,0x20,0x5b,0x6e
00018c  6e6e6e5d          DCB      0x6e,0x6e,0x6e,0x5d
000190  20202020          DCB      0x20,0x20,0x20,0x20
000194  2020207c          DCB      0x20,0x20,0x20,0x7c
000198  20637265          DCB      0x20,0x63,0x72,0x65
00019c  61746520          DCB      0x61,0x74,0x65,0x20
0001a0  61206669          DCB      0x61,0x20,0x66,0x69
0001a4  6c652066          DCB      0x6c,0x65,0x20,0x66
0001a8  696c6c65          DCB      0x69,0x6c,0x6c,0x65
0001ac  64207769          DCB      0x64,0x20,0x77,0x69
0001b0  74682074          DCB      0x74,0x68,0x20,0x74
0001b4  65787420          DCB      0x65,0x78,0x74,0x20
0001b8  20202020          DCB      0x20,0x20,0x20,0x20
0001bc  20202020          DCB      0x20,0x20,0x20,0x20
0001c0  2020207c          DCB      0x20,0x20,0x20,0x7c
0001c4  0a7c2020          DCB      0x0a,0x7c,0x20,0x20
0001c8  20202020          DCB      0x20,0x20,0x20,0x20
0001cc  20202020          DCB      0x20,0x20,0x20,0x20
0001d0  20202020          DCB      0x20,0x20,0x20,0x20
0001d4  20202020          DCB      0x20,0x20,0x20,0x20
0001d8  20202020          DCB      0x20,0x20,0x20,0x20
0001dc  20202020          DCB      0x20,0x20,0x20,0x20
0001e0  207c2020          DCB      0x20,0x7c,0x20,0x20
0001e4  5b6e6e6e          DCB      0x5b,0x6e,0x6e,0x6e
0001e8  6e202d20          DCB      0x6e,0x20,0x2d,0x20
0001ec  6e756d62          DCB      0x6e,0x75,0x6d,0x62
0001f0  6572206f          DCB      0x65,0x72,0x20,0x6f
0001f4  66206c69          DCB      0x66,0x20,0x6c,0x69
0001f8  6e65732c          DCB      0x6e,0x65,0x73,0x2c
0001fc  20646566          DCB      0x20,0x64,0x65,0x66
000200  61756c74          DCB      0x61,0x75,0x6c,0x74
000204  3d313030          DCB      0x3d,0x31,0x30,0x30
000208  305d2020          DCB      0x30,0x5d,0x20,0x20
00020c  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
000210  20545950          DCB      0x20,0x54,0x59,0x50
000214  45202266          DCB      0x45,0x20,0x22,0x66
000218  6e616d65          DCB      0x6e,0x61,0x6d,0x65
00021c  22202020          DCB      0x22,0x20,0x20,0x20
000220  20202020          DCB      0x20,0x20,0x20,0x20
000224  20202020          DCB      0x20,0x20,0x20,0x20
000228  2020207c          DCB      0x20,0x20,0x20,0x7c
00022c  20646973          DCB      0x20,0x64,0x69,0x73
000230  706c6179          DCB      0x70,0x6c,0x61,0x79
000234  73207468          DCB      0x73,0x20,0x74,0x68
000238  6520636f          DCB      0x65,0x20,0x63,0x6f
00023c  6e74656e          DCB      0x6e,0x74,0x65,0x6e
000240  74206f66          DCB      0x74,0x20,0x6f,0x66
000244  20612074          DCB      0x20,0x61,0x20,0x74
000248  65787420          DCB      0x65,0x78,0x74,0x20
00024c  66696c65          DCB      0x66,0x69,0x6c,0x65
000250  20202020          DCB      0x20,0x20,0x20,0x20
000254  2020207c          DCB      0x20,0x20,0x20,0x7c
000258  0a7c2052          DCB      0x0a,0x7c,0x20,0x52
00025c  454e2022          DCB      0x45,0x4e,0x20,0x22
000260  666e616d          DCB      0x66,0x6e,0x61,0x6d
000264  65312220          DCB      0x65,0x31,0x22,0x20
000268  22666e61          DCB      0x22,0x66,0x6e,0x61
00026c  6d653222          DCB      0x6d,0x65,0x32,0x22
000270  20202020          DCB      0x20,0x20,0x20,0x20
000274  207c2072          DCB      0x20,0x7c,0x20,0x72
000278  656e616d          DCB      0x65,0x6e,0x61,0x6d
00027c  65732061          DCB      0x65,0x73,0x20,0x61
000280  2066696c          DCB      0x20,0x66,0x69,0x6c
000284  65202766          DCB      0x65,0x20,0x27,0x66
000288  6e616d65          DCB      0x6e,0x61,0x6d,0x65
00028c  31272074          DCB      0x31,0x27,0x20,0x74
000290  6f202766          DCB      0x6f,0x20,0x27,0x66
000294  6e616d65          DCB      0x6e,0x61,0x6d,0x65
000298  32272020          DCB      0x32,0x27,0x20,0x20
00029c  20202020          DCB      0x20,0x20,0x20,0x20
0002a0  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
0002a4  20434f50          DCB      0x20,0x43,0x4f,0x50
0002a8  59202266          DCB      0x59,0x20,0x22,0x66
0002ac  696e2220          DCB      0x69,0x6e,0x22,0x20
0002b0  5b226669          DCB      0x5b,0x22,0x66,0x69
0002b4  6e32225d          DCB      0x6e,0x32,0x22,0x5d
0002b8  2022666f          DCB      0x20,0x22,0x66,0x6f
0002bc  7574227c          DCB      0x75,0x74,0x22,0x7c
0002c0  20636f70          DCB      0x20,0x63,0x6f,0x70
0002c4  69657320          DCB      0x69,0x65,0x73,0x20
0002c8  61206669          DCB      0x61,0x20,0x66,0x69
0002cc  6c652027          DCB      0x6c,0x65,0x20,0x27
0002d0  66696e27          DCB      0x66,0x69,0x6e,0x27
0002d4  20746f20          DCB      0x20,0x74,0x6f,0x20
0002d8  27666f75          DCB      0x27,0x66,0x6f,0x75
0002dc  74272066          DCB      0x74,0x27,0x20,0x66
0002e0  696c6520          DCB      0x69,0x6c,0x65,0x20
0002e4  20202020          DCB      0x20,0x20,0x20,0x20
0002e8  2020207c          DCB      0x20,0x20,0x20,0x7c
0002ec  0a7c2020          DCB      0x0a,0x7c,0x20,0x20
0002f0  20202020          DCB      0x20,0x20,0x20,0x20
0002f4  20202020          DCB      0x20,0x20,0x20,0x20
0002f8  20202020          DCB      0x20,0x20,0x20,0x20
0002fc  20202020          DCB      0x20,0x20,0x20,0x20
000300  20202020          DCB      0x20,0x20,0x20,0x20
000304  20202020          DCB      0x20,0x20,0x20,0x20
000308  207c2020          DCB      0x20,0x7c,0x20,0x20
00030c  5b276669          DCB      0x5b,0x27,0x66,0x69
000310  6e322720          DCB      0x6e,0x32,0x27,0x20
000314  6f707469          DCB      0x6f,0x70,0x74,0x69
000318  6f6e206d          DCB      0x6f,0x6e,0x20,0x6d
00031c  65726765          DCB      0x65,0x72,0x67,0x65
000320  73202766          DCB      0x73,0x20,0x27,0x66
000324  696e2720          DCB      0x69,0x6e,0x27,0x20
000328  616e6420          DCB      0x61,0x6e,0x64,0x20
00032c  2766696e          DCB      0x27,0x66,0x69,0x6e
000330  32275d20          DCB      0x32,0x27,0x5d,0x20
000334  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
000338  2044454c          DCB      0x20,0x44,0x45,0x4c
00033c  2022666e          DCB      0x20,0x22,0x66,0x6e
000340  616d6522          DCB      0x61,0x6d,0x65,0x22
000344  20202020          DCB      0x20,0x20,0x20,0x20
000348  20202020          DCB      0x20,0x20,0x20,0x20
00034c  20202020          DCB      0x20,0x20,0x20,0x20
000350  2020207c          DCB      0x20,0x20,0x20,0x7c
000354  2064656c          DCB      0x20,0x64,0x65,0x6c
000358  65746573          DCB      0x65,0x74,0x65,0x73
00035c  20612066          DCB      0x20,0x61,0x20,0x66
000360  696c6520          DCB      0x69,0x6c,0x65,0x20
000364  20202020          DCB      0x20,0x20,0x20,0x20
000368  20202020          DCB      0x20,0x20,0x20,0x20
00036c  20202020          DCB      0x20,0x20,0x20,0x20
000370  20202020          DCB      0x20,0x20,0x20,0x20
000374  20202020          DCB      0x20,0x20,0x20,0x20
000378  20202020          DCB      0x20,0x20,0x20,0x20
00037c  2020207c          DCB      0x20,0x20,0x20,0x7c
000380  0a7c2044          DCB      0x0a,0x7c,0x20,0x44
000384  49522022          DCB      0x49,0x52,0x20,0x22
000388  5b6d6173          DCB      0x5b,0x6d,0x61,0x73
00038c  6b5d2220          DCB      0x6b,0x5d,0x22,0x20
000390  20202020          DCB      0x20,0x20,0x20,0x20
000394  20202020          DCB      0x20,0x20,0x20,0x20
000398  20202020          DCB      0x20,0x20,0x20,0x20
00039c  207c2064          DCB      0x20,0x7c,0x20,0x64
0003a0  6973706c          DCB      0x69,0x73,0x70,0x6c
0003a4  61797320          DCB      0x61,0x79,0x73,0x20
0003a8  61206c69          DCB      0x61,0x20,0x6c,0x69
0003ac  7374206f          DCB      0x73,0x74,0x20,0x6f
0003b0  66206669          DCB      0x66,0x20,0x66,0x69
0003b4  6c657320          DCB      0x6c,0x65,0x73,0x20
0003b8  696e2074          DCB      0x69,0x6e,0x20,0x74
0003bc  68652064          DCB      0x68,0x65,0x20,0x64
0003c0  69726563          DCB      0x69,0x72,0x65,0x63
0003c4  746f7279          DCB      0x74,0x6f,0x72,0x79
0003c8  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
0003cc  20464f52          DCB      0x20,0x46,0x4f,0x52
0003d0  4d415420          DCB      0x4d,0x41,0x54,0x20
0003d4  5b6c6162          DCB      0x5b,0x6c,0x61,0x62
0003d8  656c205b          DCB      0x65,0x6c,0x20,0x5b
0003dc  2f464154          DCB      0x2f,0x46,0x41,0x54
0003e0  33325d5d          DCB      0x33,0x32,0x5d,0x5d
0003e4  2020207c          DCB      0x20,0x20,0x20,0x7c
0003e8  20666f72          DCB      0x20,0x66,0x6f,0x72
0003ec  6d617473          DCB      0x6d,0x61,0x74,0x73
0003f0  20466c61          DCB      0x20,0x46,0x6c,0x61
0003f4  7368204d          DCB      0x73,0x68,0x20,0x4d
0003f8  656d6f72          DCB      0x65,0x6d,0x6f,0x72
0003fc  79204361          DCB      0x79,0x20,0x43,0x61
000400  72642020          DCB      0x72,0x64,0x20,0x20
000404  20202020          DCB      0x20,0x20,0x20,0x20
000408  20202020          DCB      0x20,0x20,0x20,0x20
00040c  20202020          DCB      0x20,0x20,0x20,0x20
000410  2020207c          DCB      0x20,0x20,0x20,0x7c
000414  0a7c2020          DCB      0x0a,0x7c,0x20,0x20
000418  20202020          DCB      0x20,0x20,0x20,0x20
00041c  20202020          DCB      0x20,0x20,0x20,0x20
000420  20202020          DCB      0x20,0x20,0x20,0x20
000424  20202020          DCB      0x20,0x20,0x20,0x20
000428  20202020          DCB      0x20,0x20,0x20,0x20
00042c  20202020          DCB      0x20,0x20,0x20,0x20
000430  207c205b          DCB      0x20,0x7c,0x20,0x5b
000434  2f464154          DCB      0x2f,0x46,0x41,0x54
000438  3332206f          DCB      0x33,0x32,0x20,0x6f
00043c  7074696f          DCB      0x70,0x74,0x69,0x6f
000440  6e207365          DCB      0x6e,0x20,0x73,0x65
000444  6c656374          DCB      0x6c,0x65,0x63,0x74
000448  73204641          DCB      0x73,0x20,0x46,0x41
00044c  54333220          DCB      0x54,0x33,0x32,0x20
000450  66696c65          DCB      0x66,0x69,0x6c,0x65
000454  20737973          DCB      0x20,0x73,0x79,0x73
000458  74656d5d          DCB      0x74,0x65,0x6d,0x5d
00045c  207c0a7c          DCB      0x20,0x7c,0x0a,0x7c
000460  2048454c          DCB      0x20,0x48,0x45,0x4c
000464  5020206f          DCB      0x50,0x20,0x20,0x6f
000468  7220203f          DCB      0x72,0x20,0x20,0x3f
00046c  20202020          DCB      0x20,0x20,0x20,0x20
000470  20202020          DCB      0x20,0x20,0x20,0x20
000474  20202020          DCB      0x20,0x20,0x20,0x20
000478  2020207c          DCB      0x20,0x20,0x20,0x7c
00047c  20646973          DCB      0x20,0x64,0x69,0x73
000480  706c6179          DCB      0x70,0x6c,0x61,0x79
000484  73207468          DCB      0x73,0x20,0x74,0x68
000488  69732068          DCB      0x69,0x73,0x20,0x68
00048c  656c7020          DCB      0x65,0x6c,0x70,0x20
000490  20202020          DCB      0x20,0x20,0x20,0x20
000494  20202020          DCB      0x20,0x20,0x20,0x20
000498  20202020          DCB      0x20,0x20,0x20,0x20
00049c  20202020          DCB      0x20,0x20,0x20,0x20
0004a0  20202020          DCB      0x20,0x20,0x20,0x20
0004a4  2020207c          DCB      0x20,0x20,0x20,0x7c
0004a8  0a2b2d2d          DCB      0x0a,0x2b,0x2d,0x2d
0004ac  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004b0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004b4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004b8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004bc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004c0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004c4  2d2b2d2d          DCB      0x2d,0x2b,0x2d,0x2d
0004c8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004cc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004d0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004d4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004d8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004dc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004e0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004e4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004e8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004ec  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0004f0  2d2b0a00          DCB      0x2d,0x2b,0x0a,0x00
                  ||cmd||
0004f4  43415000          DCB      0x43,0x41,0x50,0x00
                          DCD      0x00000000
                          DCD      cmd_capture
000500  54595045          DCB      0x54,0x59,0x50,0x45
000504  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      cmd_type
00050c  52454e00          DCB      0x52,0x45,0x4e,0x00
                          DCD      0x00000000
                          DCD      cmd_rename
000518  434f5059          DCB      0x43,0x4f,0x50,0x59
00051c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      cmd_copy
000524  44454c00          DCB      0x44,0x45,0x4c,0x00
                          DCD      0x00000000
                          DCD      cmd_delete
000530  44495200          DCB      0x44,0x49,0x52,0x00
                          DCD      0x00000000
                          DCD      cmd_dir
00053c  464f524d          DCB      0x46,0x4f,0x52,0x4d
000540  41540000          DCB      0x41,0x54,0x00,0x00
                          DCD      cmd_format
000548  48454c50          DCB      0x48,0x45,0x4c,0x50
00054c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      cmd_help
000554  46494c4c          DCB      0x46,0x49,0x4c,0x4c
000558  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      cmd_fill
000560  3f000000          DCB      0x3f,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      cmd_help

                  __ARM_use_no_argv EQU 0
