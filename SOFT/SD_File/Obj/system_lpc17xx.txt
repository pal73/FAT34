; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\system_lpc17xx.o --depend=.\Obj\system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\system_lpc17xx.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;401     */
;;;402    void SystemInit (void)
000000  b530              PUSH     {r4,r5,lr}
;;;403    {
;;;404    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;405      LPC_SC->SCS       = SCS_Val;
000002  4848              LDR      r0,|L1.292|
000004  2120              MOVS     r1,#0x20
000006  f8c011a0          STR      r1,[r0,#0x1a0]
;;;406      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;407        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  bf00              NOP      
                  |L1.12|
00000c  f8d011a0          LDR      r1,[r0,#0x1a0]
000010  0649              LSLS     r1,r1,#25
000012  d5fb              BPL      |L1.12|
;;;408      }
;;;409    
;;;410      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000014  f1000080          ADD      r0,r0,#0x80
000018  2203              MOVS     r2,#3
00001a  f8c02084          STR      r2,[r0,#0x84]
;;;411    
;;;412      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001e  f04f0100          MOV      r1,#0
000022  f8c01128          STR      r1,[r0,#0x128]
;;;413      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000026  f8c0112c          STR      r1,[r0,#0x12c]
;;;414    
;;;415      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002a  f04f0301          MOV      r3,#1
00002e  f8c0308c          STR      r3,[r0,#0x8c]
;;;416    
;;;417    #if (PLL0_SETUP)
;;;418      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000032  4c3d              LDR      r4,|L1.296|
000034  6044              STR      r4,[r0,#4]
;;;419      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000036  6003              STR      r3,[r0,#0]
;;;420      LPC_SC->PLL0FEED  = 0xAA;
000038  f04f03aa          MOV      r3,#0xaa
00003c  60c3              STR      r3,[r0,#0xc]
;;;421      LPC_SC->PLL0FEED  = 0x55;
00003e  f04f0455          MOV      r4,#0x55
000042  60c4              STR      r4,[r0,#0xc]
000044  f1a00080          SUB      r0,r0,#0x80
                  |L1.72|
;;;422      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000048  f8d05088          LDR      r5,[r0,#0x88]
00004c  016d              LSLS     r5,r5,#5
00004e  d5fb              BPL      |L1.72|
;;;423    
;;;424      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000050  f8402f80          STR      r2,[r0,#0x80]!
;;;425      LPC_SC->PLL0FEED  = 0xAA;
000054  60c3              STR      r3,[r0,#0xc]
;;;426      LPC_SC->PLL0FEED  = 0x55;
000056  60c4              STR      r4,[r0,#0xc]
;;;427    #endif
;;;428    
;;;429    #if (PLL1_SETUP)
;;;430      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;431      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;432      LPC_SC->PLL1FEED  = 0xAA;
;;;433      LPC_SC->PLL1FEED  = 0x55;
;;;434      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;435    
;;;436      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;437      LPC_SC->PLL1FEED  = 0xAA;
;;;438      LPC_SC->PLL1FEED  = 0x55;
;;;439    #else
;;;440      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
000058  f8c01088          STR      r1,[r0,#0x88]
;;;441    #endif
;;;442    
;;;443      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00005c  4a33              LDR      r2,|L1.300|
00005e  6442              STR      r2,[r0,#0x44]
;;;444    
;;;445      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000060  f8c01148          STR      r1,[r0,#0x148]
;;;446    #endif
;;;447    
;;;448      /* Determine clock frequency according to clock register values             */
;;;449      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
000064  6882              LDR      r2,[r0,#8]
000066  f1a00080          SUB      r0,r0,#0x80
00006a  ea6f6212          MVN      r2,r2,LSR #24
00006e  0792              LSLS     r2,r2,#30
;;;450        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;451          case 0:                           /* Internal RC oscillator => PLL0     */
;;;452          case 3:                           /* Reserved, default to Internal RC   */
;;;453            SystemFrequency = (IRC_OSC * 
000070  492f              LDR      r1,|L1.304|
;;;454                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;455                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;456                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;457            break;
;;;458          case 1:                           /* Main oscillator => PLL0            */
;;;459            SystemFrequency = (OSC_CLK * 
;;;460                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
;;;464          case 2:                           /* RTC oscillator => PLL0             */
;;;465            SystemFrequency = (RTC_CLK * 
;;;466                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
;;;470        }
;;;471      } else {
;;;472        switch (LPC_SC->CLKSRCSEL & 0x03) {
000072  f8d0210c          LDR      r2,[r0,#0x10c]
000076  f0020203          AND      r2,r2,#3
00007a  d007              BEQ      |L1.140|
00007c  b3ca              CBZ      r2,|L1.242|
00007e  2a01              CMP      r2,#1
000080  d03c              BEQ      |L1.252|
000082  2a02              CMP      r2,#2
000084  d03e              BEQ      |L1.260|
000086  2a03              CMP      r2,#3
000088  d145              BNE      |L1.278|
00008a  e033              B        |L1.244|
                  |L1.140|
00008c  b12a              CBZ      r2,|L1.154|
00008e  2a01              CMP      r2,#1                 ;450
000090  d010              BEQ      |L1.180|
000092  2a02              CMP      r2,#2                 ;450
000094  d01f              BEQ      |L1.214|
000096  2a03              CMP      r2,#3                 ;450
000098  d13d              BNE      |L1.278|
                  |L1.154|
00009a  f8502f88          LDR      r2,[r0,#0x88]!        ;453
00009e  6fc3              LDR      r3,[r0,#0x7c]         ;453
0000a0  f3c24207          UBFX     r2,r2,#16,#8          ;453
0000a4  1c52              ADDS     r2,r2,#1              ;453
0000a6  b2db              UXTB     r3,r3                 ;453
0000a8  1c5b              ADDS     r3,r3,#1              ;453
0000aa  435a              MULS     r2,r3,r2              ;453
0000ac  f8503988          LDR      r3,[r0],#-0x88        ;453
0000b0  4c20              LDR      r4,|L1.308|
0000b2  e00b              B        |L1.204|
                  |L1.180|
0000b4  f8502f88          LDR      r2,[r0,#0x88]!        ;459
0000b8  6fc3              LDR      r3,[r0,#0x7c]         ;459
0000ba  f3c24207          UBFX     r2,r2,#16,#8          ;459
0000be  1c52              ADDS     r2,r2,#1              ;459
0000c0  b2db              UXTB     r3,r3                 ;459
0000c2  1c5b              ADDS     r3,r3,#1              ;459
0000c4  435a              MULS     r2,r3,r2              ;459
0000c6  f8503988          LDR      r3,[r0],#-0x88        ;459
0000ca  4c1b              LDR      r4,|L1.312|
                  |L1.204|
0000cc  f3c3030e          UBFX     r3,r3,#0,#15          ;453
0000d0  1c5b              ADDS     r3,r3,#1              ;453
0000d2  4363              MULS     r3,r4,r3              ;453
0000d4  e01c              B        |L1.272|
                  |L1.214|
0000d6  f8502f88          LDR      r2,[r0,#0x88]!        ;465
0000da  6fc3              LDR      r3,[r0,#0x7c]         ;465
0000dc  f3c24207          UBFX     r2,r2,#16,#8          ;465
0000e0  1c52              ADDS     r2,r2,#1              ;465
0000e2  b2db              UXTB     r3,r3                 ;465
0000e4  1c5b              ADDS     r3,r3,#1              ;465
0000e6  435a              MULS     r2,r3,r2              ;465
0000e8  f8503988          LDR      r3,[r0],#-0x88        ;465
0000ec  f44f447a          MOV      r4,#0xfa00            ;465
0000f0  e7ec              B        |L1.204|
                  |L1.242|
0000f2  e7ff              B        |L1.244|
                  |L1.244|
;;;473          case 0:                           /* Internal RC oscillator => PLL0     */
;;;474          case 3:                           /* Reserved, default to Internal RC   */
;;;475            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0000f4  f8d02104          LDR      r2,[r0,#0x104]
0000f8  4b10              LDR      r3,|L1.316|
;;;476            break;
0000fa  e007              B        |L1.268|
                  |L1.252|
;;;477          case 1:                           /* Main oscillator => PLL0            */
;;;478            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0000fc  f8d02104          LDR      r2,[r0,#0x104]
000100  4b0f              LDR      r3,|L1.320|
;;;479            break;
000102  e003              B        |L1.268|
                  |L1.260|
;;;480          case 2:                           /* RTC oscillator => PLL0             */
;;;481            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000104  f8d02104          LDR      r2,[r0,#0x104]
000108  f44f43fa          MOV      r3,#0x7d00
                  |L1.268|
00010c  b2d2              UXTB     r2,r2
00010e  1c52              ADDS     r2,r2,#1
                  |L1.272|
000110  fbb3f2f2          UDIV     r2,r3,r2
000114  600a              STR      r2,[r1,#0]  ; SystemFrequency
                  |L1.278|
;;;482            break;
;;;483        }
;;;484      }
;;;485    
;;;486    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;487      LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
000116  6801              LDR      r1,[r0,#0]
000118  f4214170          BIC      r1,r1,#0xf000
00011c  f4414180          ORR      r1,r1,#0x4000
000120  6001              STR      r1,[r0,#0]
;;;488    #endif
;;;489    }
000122  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.292|
                          DCD      0x400fc000
                  |L1.296|
                          DCD      0x00050063
                  |L1.300|
                          DCD      0x042887de
                  |L1.304|
                          DCD      ||.data||
                  |L1.308|
                          DCD      0x007a1200
                  |L1.312|
                          DCD      0x016e3600
                  |L1.316|
                          DCD      0x003d0900
                  |L1.320|
                          DCD      0x00b71b00

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900
